{"ast":null,"code":"var _jsxFileName = \"E:\\\\test project\\\\frontend\\\\src\\\\components\\\\DataVisualization.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Pie, Bar, Line } from 'react-chartjs-2';\nimport './DataVisualization.css';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);\nconst DataVisualization = ({\n  data,\n  initialChartType = 'bar',\n  showTableByDefault = false,\n  formattedHeaders\n}) => {\n  _s();\n  // If there's only one column, force table view\n  const [chartType, setChartType] = useState(data.columns.length <= 1 ? 'table' : initialChartType);\n  const [labelColumn, setLabelColumn] = useState(null);\n  const [valueColumn, setValueColumn] = useState(null);\n  const [isFormatted, setIsFormatted] = useState(true);\n\n  // Map of original column names to formatted display names\n  const columnDisplayNames = React.useMemo(() => {\n    if (!formattedHeaders || formattedHeaders.length !== data.columns.length) {\n      return {};\n    }\n    const displayMap = {};\n    data.columns.forEach((col, index) => {\n      displayMap[col] = formattedHeaders[index];\n    });\n    return displayMap;\n  }, [data.columns, formattedHeaders]);\n\n  // Find numeric columns for values\n  const numericColumns = data.columns.filter(col => {\n    if (data.rows.length === 0) return false;\n    const value = data.rows[0][col];\n    return typeof value === 'number' || !isNaN(Number(value));\n  });\n\n  // Find string/categorical columns for labels\n  const categoricalColumns = data.columns.filter(col => {\n    if (data.rows.length === 0) return false;\n    const value = data.rows[0][col];\n    return typeof value === 'string' || value instanceof String;\n  });\n\n  // We check data.columns.length > 1 directly in the render function\n\n  // All columns for complete selection options\n  const allColumns = data.columns;\n\n  // Auto-select appropriate columns on mount\n  React.useEffect(() => {\n    // For bar chart, specifically select department_name and department_identifier\n    if (chartType === 'bar') {\n      // Find department_name column for label\n      const departmentNameColumn = data.columns.find(col => col.toLowerCase().includes('department_name'));\n\n      // Find department_identifier column for value\n      const departmentIdColumn = data.columns.find(col => col.toLowerCase().includes('department_identifier'));\n\n      // Set the columns if found\n      if (departmentNameColumn) {\n        setLabelColumn(departmentNameColumn);\n      }\n      if (departmentIdColumn) {\n        setValueColumn(departmentIdColumn);\n      }\n    }\n    // For other chart types, use the original auto-selection logic\n    else {\n      // Auto-select categorical column for labels\n      if (!labelColumn && categoricalColumns.length > 0) {\n        // Prefer department_name or name columns if available\n        const preferredLabelColumns = ['department_name', 'name', 'employee_first_name', 'employee_last_name'];\n        const preferredColumn = categoricalColumns.find(col => preferredLabelColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase())));\n        setLabelColumn(preferredColumn || categoricalColumns[0]);\n      }\n\n      // Auto-select numeric column for values\n      if (!valueColumn && numericColumns.length > 0) {\n        // Prefer salary or amount columns if available\n        const preferredValueColumns = ['salary', 'amount', 'price', 'cost', 'revenue', 'count'];\n        const preferredColumn = numericColumns.find(col => preferredValueColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase())));\n        setValueColumn(preferredColumn || numericColumns[0]);\n      }\n    }\n  }, [chartType, data.columns, categoricalColumns, numericColumns, labelColumn, valueColumn]);\n  const handleVisualize = type => {\n    setChartType(type);\n\n    // Reset column selections when changing chart type\n    if (type === 'bar') {\n      // For bar chart, find department columns\n      const departmentNameColumn = data.columns.find(col => col.toLowerCase().includes('department_name'));\n      const departmentIdColumn = data.columns.find(col => col.toLowerCase().includes('department_identifier'));\n\n      // Set the columns if found\n      if (departmentNameColumn) {\n        setLabelColumn(departmentNameColumn);\n      }\n      if (departmentIdColumn) {\n        setValueColumn(departmentIdColumn);\n      }\n    } else if (type !== 'table') {\n      // For other chart types (except table), reset to default selections\n      // Auto-select categorical column for labels\n      if (categoricalColumns.length > 0) {\n        const preferredLabelColumns = ['department_name', 'name', 'employee_first_name', 'employee_last_name'];\n        const preferredColumn = categoricalColumns.find(col => preferredLabelColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase())));\n        setLabelColumn(preferredColumn || categoricalColumns[0]);\n      }\n\n      // Auto-select numeric column for values\n      if (numericColumns.length > 0) {\n        const preferredValueColumns = ['salary', 'amount', 'price', 'cost', 'revenue', 'count'];\n        const preferredColumn = numericColumns.find(col => preferredValueColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase())));\n        setValueColumn(preferredColumn || numericColumns[0]);\n      }\n    }\n  };\n  const formatValue = value => {\n    if (isFormatted) {\n      // Check if it's likely a currency value\n      if (valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('salary') || valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('price') || valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('cost') || valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('revenue')) {\n        return `â‚¹${value.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        })}`;\n      }\n\n      // Format large numbers with commas\n      if (value >= 1000) {\n        return value.toLocaleString();\n      }\n\n      // Format percentages\n      if (valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('percent') || valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('rate')) {\n        return `${value.toFixed(2)}%`;\n      }\n    }\n    return String(value);\n  };\n  const prepareChartData = () => {\n    if (!labelColumn || !valueColumn || !data.rows.length) {\n      return {\n        labels: [],\n        datasets: [{\n          data: [],\n          backgroundColor: []\n        }]\n      };\n    }\n\n    // Group data by label column and sum values\n    const groupedData = {};\n    data.rows.forEach(row => {\n      const label = String(row[labelColumn]);\n      const value = Number(row[valueColumn]);\n      if (!isNaN(value)) {\n        if (groupedData[label]) {\n          groupedData[label] += value;\n        } else {\n          groupedData[label] = value;\n        }\n      }\n    });\n\n    // Generate colors\n    const generateColors = count => {\n      const colors = [];\n      for (let i = 0; i < count; i++) {\n        const hue = i * 137 % 360; // Use golden angle for nice distribution\n        colors.push(`hsl(${hue}, 70%, 60%)`);\n      }\n      return colors;\n    };\n    const labels = Object.keys(groupedData);\n    const values = Object.values(groupedData);\n    const colors = generateColors(labels.length);\n\n    // Get display name for the value column\n    const valueDisplayName = columnDisplayNames[valueColumn] || valueColumn;\n    return {\n      labels,\n      datasets: [{\n        label: valueDisplayName,\n        // Use formatted column name\n        data: values,\n        backgroundColor: colors,\n        borderColor: colors.map(color => color.replace('60%', '50%')),\n        borderWidth: 1\n      }]\n    };\n  };\n  const chartData = prepareChartData();\n  const renderChart = () => {\n    // For table view, we don't need label and value columns\n    if (chartType === 'table') {\n      // Continue to table rendering\n    }\n    // For chart views, we need label and value columns\n    else if (!chartType || !labelColumn || !valueColumn) {\n      return null;\n    }\n\n    // For table view, render a complete data table with all columns\n    if (chartType === 'table') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"data-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: data.columns.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: columnDisplayNames[col] || col\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: data.rows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: data.columns.map((col, colIndex) => {\n                const value = row[col];\n                let displayValue;\n\n                // Format values appropriately\n                if (typeof value === 'number' && isFormatted) {\n                  if (col.toLowerCase().includes('salary') || col.toLowerCase().includes('price') || col.toLowerCase().includes('cost')) {\n                    displayValue = `â‚¹${value.toLocaleString()}`;\n                  } else {\n                    displayValue = value.toLocaleString();\n                  }\n                } else if (value instanceof Date) {\n                  displayValue = value.toLocaleDateString();\n                } else if (value === null || value === undefined) {\n                  displayValue = '-';\n                } else {\n                  displayValue = String(value);\n                }\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: displayValue\n                }, colIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 28\n                }, this);\n              })\n            }, rowIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this);\n    }\n\n    // For chart views, use Chart.js\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        title: {\n          display: true,\n          text: `${valueColumn} by ${labelColumn}`\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              // Different handling based on chart type\n              if (chartType === 'pie') {\n                // For pie charts, context.parsed is the raw value\n                const value = context.parsed;\n                const label = context.label || '';\n                const formattedValue = isFormatted ? formatValue(value) : value;\n                return `${label}: ${formattedValue}`;\n              } else if (chartType === 'bar' || chartType === 'line') {\n                // For bar and line charts\n                const label = context.dataset.label || '';\n                let value;\n                if (chartType === 'bar') {\n                  // For bar charts, the y value contains the data\n                  value = context.parsed.y;\n                } else {\n                  // For line charts, depending on orientation\n                  value = context.parsed.y;\n                }\n                const formattedValue = isFormatted ? formatValue(value) : value;\n                return `${label}: ${formattedValue}`;\n              }\n\n              // Fallback for any other chart type\n              return context.formattedValue;\n            },\n            // Add title callback to show the x-axis label (usually the category)\n            title: function (context) {\n              // Return the label (x-value) for the first item in the tooltip\n              return context.length > 0 ? context[0].label : '';\n            }\n          }\n        }\n      },\n      scales: chartType !== 'pie' ? {\n        y: {\n          ticks: {\n            callback: function (value) {\n              return isFormatted ? formatValue(value) : value;\n            }\n          }\n        }\n      } : undefined\n    };\n\n    // Create specific options for pie charts\n    const pieOptions = {\n      ...options,\n      plugins: {\n        ...options.plugins,\n        tooltip: {\n          ...options.plugins.tooltip,\n          callbacks: {\n            label: function (context) {\n              const label = context.label || '';\n              const value = context.raw;\n              const formattedValue = isFormatted ? formatValue(value) : value;\n\n              // Calculate percentage\n              const total = context.dataset.data.reduce((sum, val) => sum + val, 0);\n              const percentage = (value / total * 100).toFixed(1);\n              return `${label}: ${formattedValue} (${percentage}%)`;\n            }\n          }\n        }\n      }\n    };\n\n    // Create specific options for bar charts\n    const barOptions = {\n      ...options,\n      plugins: {\n        ...options.plugins,\n        tooltip: {\n          ...options.plugins.tooltip,\n          callbacks: {\n            label: function (context) {\n              const label = valueColumn ? columnDisplayNames[valueColumn] || valueColumn : '';\n              const value = context.parsed.y;\n              const formattedValue = isFormatted ? formatValue(value) : value;\n              return `${label}: ${formattedValue}`;\n            },\n            title: function (context) {\n              if (context.length > 0) {\n                const item = context[0];\n                const label = item.label || '';\n                return label;\n              }\n              return '';\n            }\n          }\n        }\n      }\n    };\n\n    // Create specific options for line charts\n    const lineOptions = {\n      ...options,\n      plugins: {\n        ...options.plugins,\n        tooltip: {\n          ...options.plugins.tooltip,\n          callbacks: {\n            label: function (context) {\n              const label = valueColumn ? columnDisplayNames[valueColumn] || valueColumn : '';\n              const value = context.parsed.y;\n              const formattedValue = isFormatted ? formatValue(value) : value;\n              return `${label}: ${formattedValue}`;\n            },\n            title: function (context) {\n              if (context.length > 0) {\n                const item = context[0];\n                const label = item.label || '';\n                return label;\n              }\n              return '';\n            }\n          }\n        }\n      }\n    };\n    switch (chartType) {\n      case 'pie':\n        return /*#__PURE__*/_jsxDEV(Pie, {\n          data: chartData,\n          options: pieOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 16\n        }, this);\n      case 'bar':\n        return /*#__PURE__*/_jsxDEV(Bar, {\n          data: chartData,\n          options: barOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 16\n        }, this);\n      case 'line':\n        return /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: lineOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 16\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-visualization\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '0.5rem',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '0.5rem',\n            flexWrap: 'wrap'\n          },\n          children: [data.columns.length > 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleVisualize('bar'),\n              style: {\n                backgroundColor: chartType === 'bar' ? 'var(--accent-color)' : '#f0f0f0',\n                color: chartType === 'bar' ? 'white' : 'var(--text-primary)'\n              },\n              children: \"Bar Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleVisualize('pie'),\n              style: {\n                backgroundColor: chartType === 'pie' ? 'var(--accent-color)' : '#f0f0f0',\n                color: chartType === 'pie' ? 'white' : 'var(--text-primary)'\n              },\n              children: \"Pie Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleVisualize('line'),\n              style: {\n                backgroundColor: chartType === 'line' ? 'var(--accent-color)' : '#f0f0f0',\n                color: chartType === 'line' ? 'white' : 'var(--text-primary)'\n              },\n              children: \"Line Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 505,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleVisualize('table'),\n            style: {\n              backgroundColor: chartType === 'table' ? 'var(--accent-color)' : '#f0f0f0',\n              color: chartType === 'table' ? 'white' : 'var(--text-primary)'\n            },\n            children: \"Table\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '0.5rem',\n            flexWrap: 'wrap',\n            alignItems: 'center'\n          },\n          children: [chartType === 'bar' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Label:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: labelColumn || '',\n                onChange: e => setLabelColumn(e.target.value),\n                style: {\n                  padding: '0.25rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 538,\n                  columnNumber: 21\n                }, this), allColumns.filter(col => col.toLowerCase().includes('department_name')).map(col => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: col,\n                  children: columnDisplayNames[col] || col\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 543,\n                  columnNumber: 25\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Value:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 550,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: valueColumn || '',\n                onChange: e => setValueColumn(e.target.value),\n                style: {\n                  padding: '0.25rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 556,\n                  columnNumber: 21\n                }, this), allColumns.filter(col => col.toLowerCase().includes('department_identifier')).map(col => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: col,\n                  children: columnDisplayNames[col] || col\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 561,\n                  columnNumber: 25\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), chartType !== 'bar' && chartType !== 'table' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Label:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: labelColumn || '',\n                onChange: e => setLabelColumn(e.target.value),\n                style: {\n                  padding: '0.25rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 579,\n                  columnNumber: 21\n                }, this), allColumns.map(col => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: col,\n                  children: columnDisplayNames[col] || col\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 581,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 574,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Value:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 587,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: valueColumn || '',\n                onChange: e => setValueColumn(e.target.value),\n                style: {\n                  padding: '0.25rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 593,\n                  columnNumber: 21\n                }, this), allColumns.map(col => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: col,\n                  children: columnDisplayNames[col] || col\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 595,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 588,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), chartType === 'bar' && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsFormatted(!isFormatted),\n            style: {\n              backgroundColor: isFormatted ? 'var(--accent-color)' : '#f0f0f0',\n              color: isFormatted ? 'white' : 'var(--text-primary)'\n            },\n            children: isFormatted ? 'Raw Values' : 'Format Values'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 604,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: renderChart()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 473,\n    columnNumber: 5\n  }, this);\n};\n_s(DataVisualization, \"owyJRLhhFViF1ly8iDm6eZWWd/4=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useState","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","Pie","Bar","Line","jsxDEV","_jsxDEV","Fragment","_Fragment","register","DataVisualization","data","initialChartType","showTableByDefault","formattedHeaders","_s","chartType","setChartType","columns","length","labelColumn","setLabelColumn","valueColumn","setValueColumn","isFormatted","setIsFormatted","columnDisplayNames","useMemo","displayMap","forEach","col","index","numericColumns","filter","rows","value","isNaN","Number","categoricalColumns","String","allColumns","useEffect","departmentNameColumn","find","toLowerCase","includes","departmentIdColumn","preferredLabelColumns","preferredColumn","some","preferred","preferredValueColumns","handleVisualize","type","formatValue","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","toFixed","prepareChartData","labels","datasets","backgroundColor","groupedData","row","label","generateColors","count","colors","i","hue","push","Object","keys","values","valueDisplayName","borderColor","map","color","replace","borderWidth","chartData","renderChart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","colIndex","displayValue","Date","toLocaleDateString","options","responsive","plugins","legend","position","title","display","text","tooltip","callbacks","context","parsed","formattedValue","dataset","y","scales","ticks","callback","pieOptions","raw","total","reduce","sum","val","percentage","barOptions","item","lineOptions","style","flexWrap","gap","justifyContent","alignItems","marginBottom","onClick","onChange","e","target","padding","_c","$RefreshReg$"],"sources":["E:/test project/frontend/src/components/DataVisualization.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Pie, Bar, Line } from 'react-chartjs-2';\nimport './DataVisualization.css';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface DataVisualizationProps {\n  data: {\n    columns: string[];\n    rows: any[];\n  };\n  initialChartType?: 'pie' | 'bar' | 'line' | 'table';\n  showTableByDefault?: boolean;\n  formattedHeaders?: string[];\n}\n\nconst DataVisualization: React.FC<DataVisualizationProps> = ({\n  data,\n  initialChartType = 'bar',\n  showTableByDefault = false,\n  formattedHeaders\n}) => {\n  // If there's only one column, force table view\n  const [chartType, setChartType] = useState<'pie' | 'bar' | 'line' | 'table' | null>(\n    data.columns.length <= 1 ? 'table' : initialChartType\n  );\n  const [labelColumn, setLabelColumn] = useState<string | null>(null);\n  const [valueColumn, setValueColumn] = useState<string | null>(null);\n  const [isFormatted, setIsFormatted] = useState<boolean>(true);\n\n  // Map of original column names to formatted display names\n  const columnDisplayNames = React.useMemo(() => {\n    if (!formattedHeaders || formattedHeaders.length !== data.columns.length) {\n      return {};\n    }\n\n    const displayMap: Record<string, string> = {};\n    data.columns.forEach((col, index) => {\n      displayMap[col] = formattedHeaders[index];\n    });\n\n    return displayMap;\n  }, [data.columns, formattedHeaders]);\n\n  // Find numeric columns for values\n  const numericColumns = data.columns.filter(col => {\n    if (data.rows.length === 0) return false;\n    const value = data.rows[0][col];\n    return typeof value === 'number' || !isNaN(Number(value));\n  });\n\n  // Find string/categorical columns for labels\n  const categoricalColumns = data.columns.filter(col => {\n    if (data.rows.length === 0) return false;\n    const value = data.rows[0][col];\n    return typeof value === 'string' || value instanceof String;\n  });\n\n  // We check data.columns.length > 1 directly in the render function\n\n  // All columns for complete selection options\n  const allColumns = data.columns;\n\n  // Auto-select appropriate columns on mount\n  React.useEffect(() => {\n    // For bar chart, specifically select department_name and department_identifier\n    if (chartType === 'bar') {\n      // Find department_name column for label\n      const departmentNameColumn = data.columns.find(col =>\n        col.toLowerCase().includes('department_name')\n      );\n\n      // Find department_identifier column for value\n      const departmentIdColumn = data.columns.find(col =>\n        col.toLowerCase().includes('department_identifier')\n      );\n\n      // Set the columns if found\n      if (departmentNameColumn) {\n        setLabelColumn(departmentNameColumn);\n      }\n\n      if (departmentIdColumn) {\n        setValueColumn(departmentIdColumn);\n      }\n    }\n    // For other chart types, use the original auto-selection logic\n    else {\n      // Auto-select categorical column for labels\n      if (!labelColumn && categoricalColumns.length > 0) {\n        // Prefer department_name or name columns if available\n        const preferredLabelColumns = ['department_name', 'name', 'employee_first_name', 'employee_last_name'];\n        const preferredColumn = categoricalColumns.find(col =>\n          preferredLabelColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase()))\n        );\n\n        setLabelColumn(preferredColumn || categoricalColumns[0]);\n      }\n\n      // Auto-select numeric column for values\n      if (!valueColumn && numericColumns.length > 0) {\n        // Prefer salary or amount columns if available\n        const preferredValueColumns = ['salary', 'amount', 'price', 'cost', 'revenue', 'count'];\n        const preferredColumn = numericColumns.find(col =>\n          preferredValueColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase()))\n        );\n\n        setValueColumn(preferredColumn || numericColumns[0]);\n      }\n    }\n  }, [chartType, data.columns, categoricalColumns, numericColumns, labelColumn, valueColumn]);\n\n  const handleVisualize = (type: 'pie' | 'bar' | 'line' | 'table') => {\n    setChartType(type);\n\n    // Reset column selections when changing chart type\n    if (type === 'bar') {\n      // For bar chart, find department columns\n      const departmentNameColumn = data.columns.find(col =>\n        col.toLowerCase().includes('department_name')\n      );\n\n      const departmentIdColumn = data.columns.find(col =>\n        col.toLowerCase().includes('department_identifier')\n      );\n\n      // Set the columns if found\n      if (departmentNameColumn) {\n        setLabelColumn(departmentNameColumn);\n      }\n\n      if (departmentIdColumn) {\n        setValueColumn(departmentIdColumn);\n      }\n    } else if (type !== 'table') {\n      // For other chart types (except table), reset to default selections\n      // Auto-select categorical column for labels\n      if (categoricalColumns.length > 0) {\n        const preferredLabelColumns = ['department_name', 'name', 'employee_first_name', 'employee_last_name'];\n        const preferredColumn = categoricalColumns.find(col =>\n          preferredLabelColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase()))\n        );\n\n        setLabelColumn(preferredColumn || categoricalColumns[0]);\n      }\n\n      // Auto-select numeric column for values\n      if (numericColumns.length > 0) {\n        const preferredValueColumns = ['salary', 'amount', 'price', 'cost', 'revenue', 'count'];\n        const preferredColumn = numericColumns.find(col =>\n          preferredValueColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase()))\n        );\n\n        setValueColumn(preferredColumn || numericColumns[0]);\n      }\n    }\n  };\n\n  const formatValue = (value: number): string => {\n    if (isFormatted) {\n      // Check if it's likely a currency value\n      if (valueColumn?.toLowerCase().includes('salary') ||\n          valueColumn?.toLowerCase().includes('price') ||\n          valueColumn?.toLowerCase().includes('cost') ||\n          valueColumn?.toLowerCase().includes('revenue')) {\n        return `â‚¹${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n      }\n\n      // Format large numbers with commas\n      if (value >= 1000) {\n        return value.toLocaleString();\n      }\n\n      // Format percentages\n      if (valueColumn?.toLowerCase().includes('percent') || valueColumn?.toLowerCase().includes('rate')) {\n        return `${value.toFixed(2)}%`;\n      }\n    }\n\n    return String(value);\n  };\n\n  const prepareChartData = () => {\n    if (!labelColumn || !valueColumn || !data.rows.length) {\n      return {\n        labels: [],\n        datasets: [{\n          data: [],\n          backgroundColor: [],\n        }]\n      };\n    }\n\n    // Group data by label column and sum values\n    const groupedData: Record<string, number> = {};\n\n    data.rows.forEach(row => {\n      const label = String(row[labelColumn]);\n      const value = Number(row[valueColumn]);\n\n      if (!isNaN(value)) {\n        if (groupedData[label]) {\n          groupedData[label] += value;\n        } else {\n          groupedData[label] = value;\n        }\n      }\n    });\n\n    // Generate colors\n    const generateColors = (count: number) => {\n      const colors = [];\n      for (let i = 0; i < count; i++) {\n        const hue = (i * 137) % 360; // Use golden angle for nice distribution\n        colors.push(`hsl(${hue}, 70%, 60%)`);\n      }\n      return colors;\n    };\n\n    const labels = Object.keys(groupedData);\n    const values = Object.values(groupedData);\n    const colors = generateColors(labels.length);\n\n    // Get display name for the value column\n    const valueDisplayName = columnDisplayNames[valueColumn] || valueColumn;\n\n    return {\n      labels,\n      datasets: [{\n        label: valueDisplayName, // Use formatted column name\n        data: values,\n        backgroundColor: colors,\n        borderColor: colors.map(color => color.replace('60%', '50%')),\n        borderWidth: 1,\n      }]\n    };\n  };\n\n  const chartData = prepareChartData();\n\n  const renderChart = () => {\n    // For table view, we don't need label and value columns\n    if (chartType === 'table') {\n      // Continue to table rendering\n    }\n    // For chart views, we need label and value columns\n    else if (!chartType || !labelColumn || !valueColumn) {\n      return null;\n    }\n\n    // For table view, render a complete data table with all columns\n    if (chartType === 'table') {\n      return (\n        <div className=\"data-table-container\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                {data.columns.map((col, index) => (\n                  <th key={index}>\n                    {columnDisplayNames[col] || col}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {data.rows.map((row, rowIndex) => (\n                <tr key={rowIndex}>\n                  {data.columns.map((col, colIndex) => {\n                    const value = row[col];\n                    let displayValue: React.ReactNode;\n\n                    // Format values appropriately\n                    if (typeof value === 'number' && isFormatted) {\n                      if (col.toLowerCase().includes('salary') ||\n                          col.toLowerCase().includes('price') ||\n                          col.toLowerCase().includes('cost')) {\n                        displayValue = `â‚¹${value.toLocaleString()}`;\n                      } else {\n                        displayValue = value.toLocaleString();\n                      }\n                    } else if (value instanceof Date) {\n                      displayValue = value.toLocaleDateString();\n                    } else if (value === null || value === undefined) {\n                      displayValue = '-';\n                    } else {\n                      displayValue = String(value);\n                    }\n\n                    return <td key={colIndex}>{displayValue}</td>;\n                  })}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n\n    // For chart views, use Chart.js\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top' as const,\n        },\n        title: {\n          display: true,\n          text: `${valueColumn} by ${labelColumn}`,\n        },\n        tooltip: {\n          callbacks: {\n            label: function(context: any) {\n              // Different handling based on chart type\n              if (chartType === 'pie') {\n                // For pie charts, context.parsed is the raw value\n                const value = context.parsed;\n                const label = context.label || '';\n                const formattedValue = isFormatted ? formatValue(value) : value;\n                return `${label}: ${formattedValue}`;\n              } else if (chartType === 'bar' || chartType === 'line') {\n                // For bar and line charts\n                const label = context.dataset.label || '';\n                let value;\n\n                if (chartType === 'bar') {\n                  // For bar charts, the y value contains the data\n                  value = context.parsed.y;\n                } else {\n                  // For line charts, depending on orientation\n                  value = context.parsed.y;\n                }\n\n                const formattedValue = isFormatted ? formatValue(value) : value;\n                return `${label}: ${formattedValue}`;\n              }\n\n              // Fallback for any other chart type\n              return context.formattedValue;\n            },\n            // Add title callback to show the x-axis label (usually the category)\n            title: function(context: any[]) {\n              // Return the label (x-value) for the first item in the tooltip\n              return context.length > 0 ? context[0].label : '';\n            }\n          }\n        }\n      },\n      scales: chartType !== 'pie' ? {\n        y: {\n          ticks: {\n            callback: function(value: any) {\n              return isFormatted ? formatValue(value) : value;\n            }\n          }\n        }\n      } : undefined\n    };\n\n    // Create specific options for pie charts\n    const pieOptions = {\n      ...options,\n      plugins: {\n        ...options.plugins,\n        tooltip: {\n          ...options.plugins.tooltip,\n          callbacks: {\n            label: function(context: any) {\n              const label = context.label || '';\n              const value = context.raw;\n              const formattedValue = isFormatted ? formatValue(value) : value;\n\n              // Calculate percentage\n              const total = context.dataset.data.reduce((sum: number, val: number) => sum + val, 0);\n              const percentage = ((value / total) * 100).toFixed(1);\n\n              return `${label}: ${formattedValue} (${percentage}%)`;\n            }\n          }\n        }\n      }\n    };\n\n    // Create specific options for bar charts\n    const barOptions = {\n      ...options,\n      plugins: {\n        ...options.plugins,\n        tooltip: {\n          ...options.plugins.tooltip,\n          callbacks: {\n            label: function(context: any) {\n              const label = valueColumn ? (columnDisplayNames[valueColumn] || valueColumn) : '';\n              const value = context.parsed.y;\n              const formattedValue = isFormatted ? formatValue(value) : value;\n              return `${label}: ${formattedValue}`;\n            },\n            title: function(context: any[]) {\n              if (context.length > 0) {\n                const item = context[0];\n                const label = item.label || '';\n                return label;\n              }\n              return '';\n            }\n          }\n        }\n      }\n    };\n\n    // Create specific options for line charts\n    const lineOptions = {\n      ...options,\n      plugins: {\n        ...options.plugins,\n        tooltip: {\n          ...options.plugins.tooltip,\n          callbacks: {\n            label: function(context: any) {\n              const label = valueColumn ? (columnDisplayNames[valueColumn] || valueColumn) : '';\n              const value = context.parsed.y;\n              const formattedValue = isFormatted ? formatValue(value) : value;\n              return `${label}: ${formattedValue}`;\n            },\n            title: function(context: any[]) {\n              if (context.length > 0) {\n                const item = context[0];\n                const label = item.label || '';\n                return label;\n              }\n              return '';\n            }\n          }\n        }\n      }\n    };\n\n    switch (chartType) {\n      case 'pie':\n        return <Pie data={chartData} options={pieOptions} />;\n      case 'bar':\n        return <Bar data={chartData} options={barOptions} />;\n      case 'line':\n        return <Line data={chartData} options={lineOptions} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"data-visualization\">\n      <div className=\"visualization-controls\">\n        <div style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '0.5rem',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '1rem'\n        }}>\n          <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\n            {/* Only show chart options if we have enough columns */}\n            {data.columns.length > 1 && (\n              <>\n                <button\n                  onClick={() => handleVisualize('bar')}\n                  style={{\n                    backgroundColor: chartType === 'bar' ? 'var(--accent-color)' : '#f0f0f0',\n                    color: chartType === 'bar' ? 'white' : 'var(--text-primary)',\n                  }}\n                >\n                  Bar Chart\n                </button>\n                <button\n                  onClick={() => handleVisualize('pie')}\n                  style={{\n                    backgroundColor: chartType === 'pie' ? 'var(--accent-color)' : '#f0f0f0',\n                    color: chartType === 'pie' ? 'white' : 'var(--text-primary)',\n                  }}\n                >\n                  Pie Chart\n                </button>\n                <button\n                  onClick={() => handleVisualize('line')}\n                  style={{\n                    backgroundColor: chartType === 'line' ? 'var(--accent-color)' : '#f0f0f0',\n                    color: chartType === 'line' ? 'white' : 'var(--text-primary)',\n                  }}\n                >\n                  Line Chart\n                </button>\n              </>\n            )}\n            <button\n              onClick={() => handleVisualize('table')}\n              style={{\n                backgroundColor: chartType === 'table' ? 'var(--accent-color)' : '#f0f0f0',\n                color: chartType === 'table' ? 'white' : 'var(--text-primary)',\n              }}\n            >\n              Table\n            </button>\n          </div>\n\n          <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>\n            {/* Only show controls for bar chart */}\n            {chartType === 'bar' && (\n              <>\n                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n                  <label>Label:</label>\n                  <select\n                    value={labelColumn || ''}\n                    onChange={(e) => setLabelColumn(e.target.value)}\n                    style={{ padding: '0.25rem' }}\n                  >\n                    <option value=\"\">Select</option>\n                    {/* Only show Department option for Label */}\n                    {allColumns\n                      .filter(col => col.toLowerCase().includes('department_name'))\n                      .map(col => (\n                        <option key={col} value={col}>{columnDisplayNames[col] || col}</option>\n                      ))\n                    }\n                  </select>\n                </div>\n\n                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n                  <label>Value:</label>\n                  <select\n                    value={valueColumn || ''}\n                    onChange={(e) => setValueColumn(e.target.value)}\n                    style={{ padding: '0.25rem' }}\n                  >\n                    <option value=\"\">Select</option>\n                    {/* Only show Department ID option for Value */}\n                    {allColumns\n                      .filter(col => col.toLowerCase().includes('department_identifier'))\n                      .map(col => (\n                        <option key={col} value={col}>{columnDisplayNames[col] || col}</option>\n                      ))\n                    }\n                  </select>\n                </div>\n              </>\n            )}\n\n            {/* For other chart types, show all options */}\n            {chartType !== 'bar' && chartType !== 'table' && (\n              <>\n                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n                  <label>Label:</label>\n                  <select\n                    value={labelColumn || ''}\n                    onChange={(e) => setLabelColumn(e.target.value)}\n                    style={{ padding: '0.25rem' }}\n                  >\n                    <option value=\"\">Select</option>\n                    {allColumns.map(col => (\n                      <option key={col} value={col}>{columnDisplayNames[col] || col}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n                  <label>Value:</label>\n                  <select\n                    value={valueColumn || ''}\n                    onChange={(e) => setValueColumn(e.target.value)}\n                    style={{ padding: '0.25rem' }}\n                  >\n                    <option value=\"\">Select</option>\n                    {allColumns.map(col => (\n                      <option key={col} value={col}>{columnDisplayNames[col] || col}</option>\n                    ))}\n                  </select>\n                </div>\n              </>\n            )}\n\n            {/* Only show Raw Values button for bar chart */}\n            {chartType === 'bar' && (\n              <button\n                onClick={() => setIsFormatted(!isFormatted)}\n                style={{\n                  backgroundColor: isFormatted ? 'var(--accent-color)' : '#f0f0f0',\n                  color: isFormatted ? 'white' : 'var(--text-primary)',\n                }}\n              >\n                {isFormatted ? 'Raw Values' : 'Format Values'}\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"chart-container\">\n        {renderChart()}\n      </div>\n    </div>\n  );\n};\n\nexport default DataVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}