{"ast":null,"code":"var _jsxFileName = \"E:\\\\test project\\\\frontend\\\\src\\\\components\\\\ChatInterface.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport axios from 'axios';\nimport ThinkingAnimation from './ThinkingAnimation';\nimport DataVisualization from './DataVisualization';\nimport VoiceInput from './VoiceInput';\nimport './ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const [isThinking, setIsThinking] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const scrollToBottom = useCallback(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, []);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n  const handleSend = useCallback(async () => {\n    if (!inputText.trim()) return;\n    const userMessage = {\n      text: inputText,\n      isUser: true\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInputText('');\n    setIsThinking(true);\n    try {\n      const response = await axios.post('http://localhost:8000/api/chat', {\n        message: inputText\n      });\n\n      // The response now contains structured data\n      const responseData = response.data;\n\n      // Create a formatted message for display\n      let displayText = '';\n\n      // Handle INSERT query field requests\n      if (responseData.query_type === 'INSERT_FIELD_REQUEST') {\n        // This is a request for a specific field value\n        displayText = responseData.message;\n        const botMessage = {\n          text: displayText,\n          isUser: false,\n          data: null,\n          isFieldRequest: true,\n          fieldInfo: responseData.field\n        };\n        setMessages(prev => [...prev, botMessage]);\n        setIsThinking(false);\n        return;\n      }\n\n      // Skip SQL query display - we're not showing it to the user anymore\n\n      // Add explanation if available\n      if (responseData.explanation && responseData.explanation.trim()) {\n        displayText += `${responseData.explanation}\\n\\n`;\n      }\n\n      // Add success/error message\n      if (!responseData.success && responseData.error) {\n        displayText += `Error: ${responseData.error}\\n\\n`;\n      } else if (responseData.message) {\n        // For data modification queries (UPDATE, INSERT, DELETE)\n        if (responseData.query_type && ['UPDATE', 'INSERT', 'DELETE'].includes(responseData.query_type)) {\n          displayText += `âœ… ${responseData.message}\\n\\n`;\n        } else {\n          // For SELECT queries\n          displayText += `${responseData.message}\\n\\n`;\n        }\n      }\n      const botMessage = {\n        text: displayText,\n        isUser: false,\n        data: responseData.data // Store the structured data for rendering\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setMessages(prev => [...prev, {\n        text: \"Sorry, I encountered an error while generating the response. Please try again.\",\n        isUser: false\n      }]);\n    } finally {\n      setIsThinking(false);\n    }\n  }, [inputText]);\n  useEffect(() => {\n    const handleKeyPress = e => {\n      // Ctrl/Cmd + Enter to send message\n      if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {\n        handleSend();\n      }\n      // Esc to clear input\n      if (e.key === 'Escape') {\n        setInputText('');\n      }\n      // Ctrl/Cmd + / to focus input\n      if ((e.ctrlKey || e.metaKey) && e.key === '/') {\n        var _inputRef$current;\n        e.preventDefault();\n        (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [handleSend, setInputText]);\n  const renderMessage = message => {\n    const text = message.text;\n    if (message.isUser) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-bubble user\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Check if data is suitable for visualization (has numeric columns)\n    const hasVisualizableData = message.data && message.data.columns && message.data.rows && message.data.rows.length > 0 && message.data.columns.some(col => {\n      const value = message.data.rows[0][col];\n      return typeof value === 'number' || !isNaN(Number(value));\n    });\n\n    // Render the message with text and data table (no SQL code blocks)\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '100%'\n      },\n      children: [text && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-bubble bot\",\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }, this), message.data && message.data.columns && message.data.rows && message.data.columns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '1rem'\n        },\n        children: hasVisualizableData && /*#__PURE__*/_jsxDEV(DataVisualization, {\n          data: message.data,\n          initialChartType: \"table\",\n          showTableByDefault: true,\n          formattedHeaders: message.data.columns.map(col => {\n            // Format column headers for better readability\n            if (col === 'department_identifier' && message.data.columns.includes('department_name')) {\n              return 'Department ID';\n            } else if (col === 'department_name') {\n              return 'Department';\n            } else if (col === 'employee_identifier') {\n              return 'Employee ID';\n            } else if (col === 'employee_first_name') {\n              return 'First Name';\n            } else if (col === 'employee_last_name') {\n              return 'Last Name';\n            } else if (col === 'employee_salary') {\n              return 'Salary';\n            } else if (col === 'employee_hire_date') {\n              return 'Hire Date';\n            }\n            return col;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this);\n  };\n  const handleVoiceInput = text => {\n    setInputText(text);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interface\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message-container ${message.isUser ? 'user' : 'bot'}`,\n        children: renderMessage(message)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)), isThinking && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thinking-animation\",\n        children: /*#__PURE__*/_jsxDEV(ThinkingAnimation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: inputRef,\n        className: \"chat-input\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value),\n        onKeyDown: e => {\n          if (e.key === 'Enter' && !e.shiftKey) {\n            e.preventDefault();\n            handleSend();\n          }\n        },\n        placeholder: \"Type your question here... (Ctrl + / to focus, Ctrl + Enter to send)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-actions\",\n        children: [/*#__PURE__*/_jsxDEV(VoiceInput, {\n          onSpeechResult: handleVoiceInput,\n          disabled: isThinking\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: () => handleSend(),\n          disabled: isThinking || !inputText.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"FO8RvGtYmBOTpO/eMfrgbV46lx4=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","axios","ThinkingAnimation","DataVisualization","VoiceInput","jsxDEV","_jsxDEV","ChatInterface","_s","messages","setMessages","inputText","setInputText","isThinking","setIsThinking","messagesEndRef","inputRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSend","trim","userMessage","text","isUser","prev","response","post","message","responseData","data","displayText","query_type","botMessage","isFieldRequest","fieldInfo","field","explanation","success","error","includes","console","handleKeyPress","e","ctrlKey","metaKey","key","_inputRef$current","preventDefault","focus","window","addEventListener","removeEventListener","renderMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","hasVisualizableData","columns","rows","length","some","col","value","isNaN","Number","style","maxWidth","marginTop","initialChartType","showTableByDefault","formattedHeaders","map","handleVoiceInput","index","ref","onChange","target","onKeyDown","shiftKey","placeholder","onSpeechResult","disabled","onClick","_c","$RefreshReg$"],"sources":["E:/test project/frontend/src/components/ChatInterface.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport ThinkingAnimation from './ThinkingAnimation';\r\nimport DataVisualization from './DataVisualization';\r\nimport VoiceInput from './VoiceInput';\r\nimport './ChatInterface.css';\r\n\r\ninterface FieldInfo {\r\n  name: string;\r\n  type: string;\r\n  description: string;\r\n}\r\n\r\ninterface Message {\r\n  text: string;\r\n  isUser: boolean;\r\n  data?: any;\r\n  isFieldRequest?: boolean;\r\n  fieldInfo?: FieldInfo;\r\n}\r\n\r\nconst ChatInterface: React.FC = () => {\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const [isThinking, setIsThinking] = useState(false);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const inputRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const scrollToBottom = useCallback(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages, scrollToBottom]);\r\n\r\n  const handleSend = useCallback(async () => {\r\n    if (!inputText.trim()) return;\r\n\r\n    const userMessage: Message = {\r\n      text: inputText,\r\n      isUser: true,\r\n    };\r\n\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInputText('');\r\n    setIsThinking(true);\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:8000/api/chat', {\r\n        message: inputText,\r\n      });\r\n\r\n      // The response now contains structured data\r\n      const responseData = response.data;\r\n\r\n      // Create a formatted message for display\r\n      let displayText = '';\r\n\r\n      // Handle INSERT query field requests\r\n      if (responseData.query_type === 'INSERT_FIELD_REQUEST') {\r\n        // This is a request for a specific field value\r\n        displayText = responseData.message;\r\n\r\n        const botMessage: Message = {\r\n          text: displayText,\r\n          isUser: false,\r\n          data: null,\r\n          isFieldRequest: true,\r\n          fieldInfo: responseData.field\r\n        };\r\n\r\n        setMessages(prev => [...prev, botMessage]);\r\n        setIsThinking(false);\r\n        return;\r\n      }\r\n\r\n      // Skip SQL query display - we're not showing it to the user anymore\r\n\r\n      // Add explanation if available\r\n      if (responseData.explanation && responseData.explanation.trim()) {\r\n        displayText += `${responseData.explanation}\\n\\n`;\r\n      }\r\n\r\n      // Add success/error message\r\n      if (!responseData.success && responseData.error) {\r\n        displayText += `Error: ${responseData.error}\\n\\n`;\r\n      } else if (responseData.message) {\r\n        // For data modification queries (UPDATE, INSERT, DELETE)\r\n        if (responseData.query_type && ['UPDATE', 'INSERT', 'DELETE'].includes(responseData.query_type)) {\r\n          displayText += `âœ… ${responseData.message}\\n\\n`;\r\n        } else {\r\n          // For SELECT queries\r\n          displayText += `${responseData.message}\\n\\n`;\r\n        }\r\n      }\r\n\r\n      const botMessage: Message = {\r\n        text: displayText,\r\n        isUser: false,\r\n        data: responseData.data // Store the structured data for rendering\r\n      };\r\n\r\n      setMessages(prev => [...prev, botMessage]);\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      setMessages(prev => [...prev, {\r\n        text: \"Sorry, I encountered an error while generating the response. Please try again.\",\r\n        isUser: false\r\n      }]);\r\n    } finally {\r\n      setIsThinking(false);\r\n    }\r\n  }, [inputText]);\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (e: KeyboardEvent) => {\r\n      // Ctrl/Cmd + Enter to send message\r\n      if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {\r\n        handleSend();\r\n      }\r\n      // Esc to clear input\r\n      if (e.key === 'Escape') {\r\n        setInputText('');\r\n      }\r\n      // Ctrl/Cmd + / to focus input\r\n      if ((e.ctrlKey || e.metaKey) && e.key === '/') {\r\n        e.preventDefault();\r\n        inputRef.current?.focus();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyPress);\r\n    return () => window.removeEventListener('keydown', handleKeyPress);\r\n  }, [handleSend, setInputText]);\r\n\r\n  const renderMessage = (message: Message) => {\r\n    const text = message.text;\r\n\r\n    if (message.isUser) {\r\n      return (\r\n        <div className=\"message-bubble user\">\r\n          {text}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Check if data is suitable for visualization (has numeric columns)\r\n    const hasVisualizableData = message.data &&\r\n                               message.data.columns &&\r\n                               message.data.rows &&\r\n                               message.data.rows.length > 0 &&\r\n                               message.data.columns.some((col: string) => {\r\n                                 const value = message.data.rows[0][col];\r\n                                 return typeof value === 'number' || !isNaN(Number(value));\r\n                               });\r\n\r\n    // Render the message with text and data table (no SQL code blocks)\r\n    return (\r\n      <div style={{ maxWidth: '100%' }}>\r\n        {/* Render text parts */}\r\n        {text && (\r\n          <div className=\"message-bubble bot\">\r\n            {text}\r\n          </div>\r\n        )}\r\n\r\n        {/* Render visualization if data is available */}\r\n        {message.data && message.data.columns && message.data.rows && message.data.columns.length > 0 && (\r\n          <div style={{ marginTop: '1rem' }}>\r\n            {/* Only show visualization by default */}\r\n            {hasVisualizableData && (\r\n              <DataVisualization\r\n                data={message.data}\r\n                initialChartType=\"table\"\r\n                showTableByDefault={true}\r\n                formattedHeaders={message.data.columns.map((col: string) => {\r\n                  // Format column headers for better readability\r\n                  if (col === 'department_identifier' && message.data.columns.includes('department_name')) {\r\n                    return 'Department ID';\r\n                  } else if (col === 'department_name') {\r\n                    return 'Department';\r\n                  } else if (col === 'employee_identifier') {\r\n                    return 'Employee ID';\r\n                  } else if (col === 'employee_first_name') {\r\n                    return 'First Name';\r\n                  } else if (col === 'employee_last_name') {\r\n                    return 'Last Name';\r\n                  } else if (col === 'employee_salary') {\r\n                    return 'Salary';\r\n                  } else if (col === 'employee_hire_date') {\r\n                    return 'Hire Date';\r\n                  }\r\n                  return col;\r\n                })}\r\n              />\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleVoiceInput = (text: string) => {\r\n    setInputText(text);\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-interface\">\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`message-container ${message.isUser ? 'user' : 'bot'}`}\r\n          >\r\n            {renderMessage(message)}\r\n          </div>\r\n        ))}\r\n        {isThinking && (\r\n          <div className=\"thinking-animation\">\r\n            <ThinkingAnimation />\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      <div className=\"input-container\">\r\n        <textarea\r\n          ref={inputRef}\r\n          className=\"chat-input\"\r\n          value={inputText}\r\n          onChange={(e) => setInputText(e.target.value)}\r\n          onKeyDown={(e) => {\r\n            if (e.key === 'Enter' && !e.shiftKey) {\r\n              e.preventDefault();\r\n              handleSend();\r\n            }\r\n          }}\r\n          placeholder=\"Type your question here... (Ctrl + / to focus, Ctrl + Enter to send)\"\r\n        />\r\n        <div className=\"input-actions\">\r\n          <VoiceInput\r\n            onSpeechResult={handleVoiceInput}\r\n            disabled={isThinking}\r\n          />\r\n          <button\r\n            className=\"send-button\"\r\n            onClick={() => handleSend()}\r\n            disabled={isThinking || !inputText.trim()}\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}