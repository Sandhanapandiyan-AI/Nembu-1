{"ast":null,"code":"var _jsxFileName = \"E:\\\\test project\\\\frontend\\\\src\\\\components\\\\QueryResultTable.tsx\";\nimport React from 'react';\nimport './QueryResultTable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QueryResultTable = ({\n  response\n}) => {\n  // Parse the markdown table format from the response\n  const parseMarkdownTable = markdown => {\n    const lines = markdown.split('\\n').filter(line => line.trim());\n    if (lines.length < 3) return null;\n\n    // Extract header\n    const headers = lines[0].split('|').slice(1, -1) // Remove empty first and last elements\n    .map(header => header.trim());\n\n    // Skip separator line (line[1])\n    const rows = lines.slice(2).map(line => line.split('|').slice(1, -1).map(cell => cell.trim()));\n    return {\n      headers,\n      rows\n    };\n  };\n\n  // Check if the response contains an error message\n  if (response.includes('❌ Error')) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: response.replace('❌ ', '')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Check if response contains \"No results found\"\n  if (response.includes('No results found')) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-results\",\n      children: \"\\u2139\\uFE0F No results found for this query.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n  const tableData = parseMarkdownTable(response);\n  if (!tableData) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"query-result-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"query-result-header\",\n      children: \"Query Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"query-result-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: tableData.headers.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: header.replace(/_/g, ' ').split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableData.rows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            children: cell\n          }, cellIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 33\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_c = QueryResultTable;\nexport default QueryResultTable;\nvar _c;\n$RefreshReg$(_c, \"QueryResultTable\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","QueryResultTable","response","parseMarkdownTable","markdown","lines","split","filter","line","trim","length","headers","slice","map","header","rows","cell","includes","className","children","replace","fileName","_jsxFileName","lineNumber","columnNumber","tableData","index","word","charAt","toUpperCase","join","row","rowIndex","cellIndex","_c","$RefreshReg$"],"sources":["E:/test project/frontend/src/components/QueryResultTable.tsx"],"sourcesContent":["import React from 'react';\r\nimport './QueryResultTable.css';\r\n\r\ninterface QueryResultTableProps {\r\n    response: string;\r\n}\r\n\r\nconst QueryResultTable: React.FC<QueryResultTableProps> = ({ response }) => {\r\n    // Parse the markdown table format from the response\r\n    const parseMarkdownTable = (markdown: string) => {\r\n        const lines = markdown.split('\\n').filter(line => line.trim());\r\n        if (lines.length < 3) return null;\r\n\r\n        // Extract header\r\n        const headers = lines[0]\r\n            .split('|')\r\n            .slice(1, -1) // Remove empty first and last elements\r\n            .map(header => header.trim());\r\n\r\n        // Skip separator line (line[1])\r\n        const rows = lines.slice(2).map(line =>\r\n            line\r\n                .split('|')\r\n                .slice(1, -1)\r\n                .map(cell => cell.trim())\r\n        );\r\n\r\n        return { headers, rows };\r\n    };\r\n\r\n    // Check if the response contains an error message\r\n    if (response.includes('❌ Error')) {\r\n        return (\r\n            <div className=\"error-message\">\r\n                {response.replace('❌ ', '')}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Check if response contains \"No results found\"\r\n    if (response.includes('No results found')) {\r\n        return (\r\n            <div className=\"no-results\">\r\n                ℹ️ No results found for this query.\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const tableData = parseMarkdownTable(response);\r\n    if (!tableData) return null;\r\n\r\n    return (\r\n        <div className=\"query-result-wrapper\">\r\n            <div className=\"query-result-header\">\r\n                Query Results\r\n            </div>\r\n            <table className=\"query-result-table\">\r\n                <thead>\r\n                    <tr>\r\n                        {tableData.headers.map((header, index) => (\r\n                            <th key={index}>\r\n                                {header.replace(/_/g, ' ').split(' ').map(\r\n                                    word => word.charAt(0).toUpperCase() + word.slice(1)\r\n                                ).join(' ')}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tableData.rows.map((row, rowIndex) => (\r\n                        <tr key={rowIndex}>\r\n                            {row.map((cell, cellIndex) => (\r\n                                <td key={cellIndex}>{cell}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QueryResultTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}