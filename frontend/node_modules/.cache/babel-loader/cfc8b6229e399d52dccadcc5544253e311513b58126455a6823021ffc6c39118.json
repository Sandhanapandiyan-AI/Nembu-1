{"ast":null,"code":"var _jsxFileName = \"E:\\\\test project\\\\frontend\\\\src\\\\components\\\\DataVisualization.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Pie, Bar, Line } from 'react-chartjs-2';\nimport './DataVisualization.css';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);\nconst DataVisualization = ({\n  data,\n  initialChartType = 'bar',\n  showTableByDefault = false,\n  formattedHeaders\n}) => {\n  _s();\n  const [chartType, setChartType] = useState(initialChartType);\n  const [labelColumn, setLabelColumn] = useState(null);\n  const [valueColumn, setValueColumn] = useState(null);\n  const [isFormatted, setIsFormatted] = useState(true);\n\n  // Map of original column names to formatted display names\n  const columnDisplayNames = React.useMemo(() => {\n    if (!formattedHeaders || formattedHeaders.length !== data.columns.length) {\n      return {};\n    }\n    const displayMap = {};\n    data.columns.forEach((col, index) => {\n      displayMap[col] = formattedHeaders[index];\n    });\n    return displayMap;\n  }, [data.columns, formattedHeaders]);\n\n  // Find numeric columns for values\n  const numericColumns = data.columns.filter(col => {\n    if (data.rows.length === 0) return false;\n    const value = data.rows[0][col];\n    return typeof value === 'number' || !isNaN(Number(value));\n  });\n\n  // Find string/categorical columns for labels\n  const categoricalColumns = data.columns.filter(col => {\n    if (data.rows.length === 0) return false;\n    const value = data.rows[0][col];\n    return typeof value === 'string' || value instanceof String;\n  });\n\n  // Check if we have enough columns for visualization\n  const hasEnoughColumnsForCharts = data.columns.length > 1;\n\n  // All columns for complete selection options\n  const allColumns = data.columns;\n\n  // Auto-select appropriate columns on mount\n  React.useEffect(() => {\n    // For bar chart, specifically select department_name and department_identifier\n    if (chartType === 'bar') {\n      // Find department_name column for label\n      const departmentNameColumn = data.columns.find(col => col.toLowerCase().includes('department_name'));\n\n      // Find department_identifier column for value\n      const departmentIdColumn = data.columns.find(col => col.toLowerCase().includes('department_identifier'));\n\n      // Set the columns if found\n      if (departmentNameColumn) {\n        setLabelColumn(departmentNameColumn);\n      }\n      if (departmentIdColumn) {\n        setValueColumn(departmentIdColumn);\n      }\n    }\n    // For other chart types, use the original auto-selection logic\n    else {\n      // Auto-select categorical column for labels\n      if (!labelColumn && categoricalColumns.length > 0) {\n        // Prefer department_name or name columns if available\n        const preferredLabelColumns = ['department_name', 'name', 'employee_first_name', 'employee_last_name'];\n        const preferredColumn = categoricalColumns.find(col => preferredLabelColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase())));\n        setLabelColumn(preferredColumn || categoricalColumns[0]);\n      }\n\n      // Auto-select numeric column for values\n      if (!valueColumn && numericColumns.length > 0) {\n        // Prefer salary or amount columns if available\n        const preferredValueColumns = ['salary', 'amount', 'price', 'cost', 'revenue', 'count'];\n        const preferredColumn = numericColumns.find(col => preferredValueColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase())));\n        setValueColumn(preferredColumn || numericColumns[0]);\n      }\n    }\n  }, [chartType, data.columns, categoricalColumns, numericColumns, labelColumn, valueColumn]);\n  const handleVisualize = type => {\n    setChartType(type);\n\n    // Reset column selections when changing chart type\n    if (type === 'bar') {\n      // For bar chart, find department columns\n      const departmentNameColumn = data.columns.find(col => col.toLowerCase().includes('department_name'));\n      const departmentIdColumn = data.columns.find(col => col.toLowerCase().includes('department_identifier'));\n\n      // Set the columns if found\n      if (departmentNameColumn) {\n        setLabelColumn(departmentNameColumn);\n      }\n      if (departmentIdColumn) {\n        setValueColumn(departmentIdColumn);\n      }\n    } else if (type !== 'table') {\n      // For other chart types (except table), reset to default selections\n      // Auto-select categorical column for labels\n      if (categoricalColumns.length > 0) {\n        const preferredLabelColumns = ['department_name', 'name', 'employee_first_name', 'employee_last_name'];\n        const preferredColumn = categoricalColumns.find(col => preferredLabelColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase())));\n        setLabelColumn(preferredColumn || categoricalColumns[0]);\n      }\n\n      // Auto-select numeric column for values\n      if (numericColumns.length > 0) {\n        const preferredValueColumns = ['salary', 'amount', 'price', 'cost', 'revenue', 'count'];\n        const preferredColumn = numericColumns.find(col => preferredValueColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase())));\n        setValueColumn(preferredColumn || numericColumns[0]);\n      }\n    }\n  };\n  const formatValue = value => {\n    if (isFormatted) {\n      // Check if it's likely a currency value\n      if (valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('salary') || valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('price') || valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('cost') || valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('revenue')) {\n        return `â‚¹${value.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        })}`;\n      }\n\n      // Format large numbers with commas\n      if (value >= 1000) {\n        return value.toLocaleString();\n      }\n\n      // Format percentages\n      if (valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('percent') || valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('rate')) {\n        return `${value.toFixed(2)}%`;\n      }\n    }\n    return String(value);\n  };\n  const prepareChartData = () => {\n    if (!labelColumn || !valueColumn || !data.rows.length) {\n      return {\n        labels: [],\n        datasets: [{\n          data: [],\n          backgroundColor: []\n        }]\n      };\n    }\n\n    // Group data by label column and sum values\n    const groupedData = {};\n    data.rows.forEach(row => {\n      const label = String(row[labelColumn]);\n      const value = Number(row[valueColumn]);\n      if (!isNaN(value)) {\n        if (groupedData[label]) {\n          groupedData[label] += value;\n        } else {\n          groupedData[label] = value;\n        }\n      }\n    });\n\n    // Generate colors\n    const generateColors = count => {\n      const colors = [];\n      for (let i = 0; i < count; i++) {\n        const hue = i * 137 % 360; // Use golden angle for nice distribution\n        colors.push(`hsl(${hue}, 70%, 60%)`);\n      }\n      return colors;\n    };\n    const labels = Object.keys(groupedData);\n    const values = Object.values(groupedData);\n    const colors = generateColors(labels.length);\n\n    // Get display name for the value column\n    const valueDisplayName = columnDisplayNames[valueColumn] || valueColumn;\n    return {\n      labels,\n      datasets: [{\n        label: valueDisplayName,\n        // Use formatted column name\n        data: values,\n        backgroundColor: colors,\n        borderColor: colors.map(color => color.replace('60%', '50%')),\n        borderWidth: 1\n      }]\n    };\n  };\n  const chartData = prepareChartData();\n  const renderChart = () => {\n    // For table view, we don't need label and value columns\n    if (chartType === 'table') {\n      // Continue to table rendering\n    }\n    // For chart views, we need label and value columns\n    else if (!chartType || !labelColumn || !valueColumn) {\n      return null;\n    }\n\n    // For table view, render a complete data table with all columns\n    if (chartType === 'table') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"data-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: data.columns.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: columnDisplayNames[col] || col\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: data.rows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: data.columns.map((col, colIndex) => {\n                const value = row[col];\n                let displayValue;\n\n                // Format values appropriately\n                if (typeof value === 'number' && isFormatted) {\n                  if (col.toLowerCase().includes('salary') || col.toLowerCase().includes('price') || col.toLowerCase().includes('cost')) {\n                    displayValue = `â‚¹${value.toLocaleString()}`;\n                  } else {\n                    displayValue = value.toLocaleString();\n                  }\n                } else if (value instanceof Date) {\n                  displayValue = value.toLocaleDateString();\n                } else if (value === null || value === undefined) {\n                  displayValue = '-';\n                } else {\n                  displayValue = String(value);\n                }\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: displayValue\n                }, colIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 28\n                }, this);\n              })\n            }, rowIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this);\n    }\n\n    // For chart views, use Chart.js\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        title: {\n          display: true,\n          text: `${valueColumn} by ${labelColumn}`\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              // Different handling based on chart type\n              if (chartType === 'pie') {\n                // For pie charts, context.parsed is the raw value\n                const value = context.parsed;\n                const label = context.label || '';\n                const formattedValue = isFormatted ? formatValue(value) : value;\n                return `${label}: ${formattedValue}`;\n              } else if (chartType === 'bar' || chartType === 'line') {\n                // For bar and line charts\n                const label = context.dataset.label || '';\n                let value;\n                if (chartType === 'bar') {\n                  // For bar charts, the y value contains the data\n                  value = context.parsed.y;\n                } else {\n                  // For line charts, depending on orientation\n                  value = context.parsed.y;\n                }\n                const formattedValue = isFormatted ? formatValue(value) : value;\n                return `${label}: ${formattedValue}`;\n              }\n\n              // Fallback for any other chart type\n              return context.formattedValue;\n            },\n            // Add title callback to show the x-axis label (usually the category)\n            title: function (context) {\n              // Return the label (x-value) for the first item in the tooltip\n              return context.length > 0 ? context[0].label : '';\n            }\n          }\n        }\n      },\n      scales: chartType !== 'pie' ? {\n        y: {\n          ticks: {\n            callback: function (value) {\n              return isFormatted ? formatValue(value) : value;\n            }\n          }\n        }\n      } : undefined\n    };\n\n    // Create specific options for pie charts\n    const pieOptions = {\n      ...options,\n      plugins: {\n        ...options.plugins,\n        tooltip: {\n          ...options.plugins.tooltip,\n          callbacks: {\n            label: function (context) {\n              const label = context.label || '';\n              const value = context.raw;\n              const formattedValue = isFormatted ? formatValue(value) : value;\n\n              // Calculate percentage\n              const total = context.dataset.data.reduce((sum, val) => sum + val, 0);\n              const percentage = (value / total * 100).toFixed(1);\n              return `${label}: ${formattedValue} (${percentage}%)`;\n            }\n          }\n        }\n      }\n    };\n\n    // Create specific options for bar charts\n    const barOptions = {\n      ...options,\n      plugins: {\n        ...options.plugins,\n        tooltip: {\n          ...options.plugins.tooltip,\n          callbacks: {\n            label: function (context) {\n              const label = valueColumn ? columnDisplayNames[valueColumn] || valueColumn : '';\n              const value = context.parsed.y;\n              const formattedValue = isFormatted ? formatValue(value) : value;\n              return `${label}: ${formattedValue}`;\n            },\n            title: function (context) {\n              if (context.length > 0) {\n                const item = context[0];\n                const label = item.label || '';\n                return label;\n              }\n              return '';\n            }\n          }\n        }\n      }\n    };\n\n    // Create specific options for line charts\n    const lineOptions = {\n      ...options,\n      plugins: {\n        ...options.plugins,\n        tooltip: {\n          ...options.plugins.tooltip,\n          callbacks: {\n            label: function (context) {\n              const label = valueColumn ? columnDisplayNames[valueColumn] || valueColumn : '';\n              const value = context.parsed.y;\n              const formattedValue = isFormatted ? formatValue(value) : value;\n              return `${label}: ${formattedValue}`;\n            },\n            title: function (context) {\n              if (context.length > 0) {\n                const item = context[0];\n                const label = item.label || '';\n                return label;\n              }\n              return '';\n            }\n          }\n        }\n      }\n    };\n    switch (chartType) {\n      case 'pie':\n        return /*#__PURE__*/_jsxDEV(Pie, {\n          data: chartData,\n          options: pieOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 16\n        }, this);\n      case 'bar':\n        return /*#__PURE__*/_jsxDEV(Bar, {\n          data: chartData,\n          options: barOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 16\n        }, this);\n      case 'line':\n        return /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: lineOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 16\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-visualization\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '0.5rem',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '0.5rem',\n            flexWrap: 'wrap'\n          },\n          children: [data.columns.length > 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleVisualize('bar'),\n              style: {\n                backgroundColor: chartType === 'bar' ? 'var(--accent-color)' : '#f0f0f0',\n                color: chartType === 'bar' ? 'white' : 'var(--text-primary)'\n              },\n              children: \"Bar Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleVisualize('pie'),\n              style: {\n                backgroundColor: chartType === 'pie' ? 'var(--accent-color)' : '#f0f0f0',\n                color: chartType === 'pie' ? 'white' : 'var(--text-primary)'\n              },\n              children: \"Pie Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 494,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleVisualize('line'),\n              style: {\n                backgroundColor: chartType === 'line' ? 'var(--accent-color)' : '#f0f0f0',\n                color: chartType === 'line' ? 'white' : 'var(--text-primary)'\n              },\n              children: \"Line Chart\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleVisualize('table'),\n            style: {\n              backgroundColor: chartType === 'table' ? 'var(--accent-color)' : '#f0f0f0',\n              color: chartType === 'table' ? 'white' : 'var(--text-primary)'\n            },\n            children: \"Table\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '0.5rem',\n            flexWrap: 'wrap',\n            alignItems: 'center'\n          },\n          children: [chartType === 'bar' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Label:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 530,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: labelColumn || '',\n                onChange: e => setLabelColumn(e.target.value),\n                style: {\n                  padding: '0.25rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 536,\n                  columnNumber: 21\n                }, this), allColumns.filter(col => col.toLowerCase().includes('department_name')).map(col => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: col,\n                  children: columnDisplayNames[col] || col\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 541,\n                  columnNumber: 25\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Value:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 548,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: valueColumn || '',\n                onChange: e => setValueColumn(e.target.value),\n                style: {\n                  padding: '0.25rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 554,\n                  columnNumber: 21\n                }, this), allColumns.filter(col => col.toLowerCase().includes('department_identifier')).map(col => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: col,\n                  children: columnDisplayNames[col] || col\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 559,\n                  columnNumber: 25\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 549,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), chartType !== 'bar' && chartType !== 'table' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Label:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 571,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: labelColumn || '',\n                onChange: e => setLabelColumn(e.target.value),\n                style: {\n                  padding: '0.25rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 577,\n                  columnNumber: 21\n                }, this), allColumns.map(col => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: col,\n                  children: columnDisplayNames[col] || col\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 579,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 572,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 570,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Value:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: valueColumn || '',\n                onChange: e => setValueColumn(e.target.value),\n                style: {\n                  padding: '0.25rem'\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 591,\n                  columnNumber: 21\n                }, this), allColumns.map(col => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: col,\n                  children: columnDisplayNames[col] || col\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 593,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 586,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), chartType === 'bar' && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsFormatted(!isFormatted),\n            style: {\n              backgroundColor: isFormatted ? 'var(--accent-color)' : '#f0f0f0',\n              color: isFormatted ? 'white' : 'var(--text-primary)'\n            },\n            children: isFormatted ? 'Raw Values' : 'Format Values'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: renderChart()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 471,\n    columnNumber: 5\n  }, this);\n};\n_s(DataVisualization, \"sEqMdgXkim+utw3zcwes2uKZ77U=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useState","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","Pie","Bar","Line","jsxDEV","_jsxDEV","Fragment","_Fragment","register","DataVisualization","data","initialChartType","showTableByDefault","formattedHeaders","_s","chartType","setChartType","labelColumn","setLabelColumn","valueColumn","setValueColumn","isFormatted","setIsFormatted","columnDisplayNames","useMemo","length","columns","displayMap","forEach","col","index","numericColumns","filter","rows","value","isNaN","Number","categoricalColumns","String","hasEnoughColumnsForCharts","allColumns","useEffect","departmentNameColumn","find","toLowerCase","includes","departmentIdColumn","preferredLabelColumns","preferredColumn","some","preferred","preferredValueColumns","handleVisualize","type","formatValue","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","toFixed","prepareChartData","labels","datasets","backgroundColor","groupedData","row","label","generateColors","count","colors","i","hue","push","Object","keys","values","valueDisplayName","borderColor","map","color","replace","borderWidth","chartData","renderChart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","colIndex","displayValue","Date","toLocaleDateString","options","responsive","plugins","legend","position","title","display","text","tooltip","callbacks","context","parsed","formattedValue","dataset","y","scales","ticks","callback","pieOptions","raw","total","reduce","sum","val","percentage","barOptions","item","lineOptions","style","flexWrap","gap","justifyContent","alignItems","marginBottom","onClick","onChange","e","target","padding","_c","$RefreshReg$"],"sources":["E:/test project/frontend/src/components/DataVisualization.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Pie, Bar, Line } from 'react-chartjs-2';\nimport './DataVisualization.css';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface DataVisualizationProps {\n  data: {\n    columns: string[];\n    rows: any[];\n  };\n  initialChartType?: 'pie' | 'bar' | 'line' | 'table';\n  showTableByDefault?: boolean;\n  formattedHeaders?: string[];\n}\n\nconst DataVisualization: React.FC<DataVisualizationProps> = ({\n  data,\n  initialChartType = 'bar',\n  showTableByDefault = false,\n  formattedHeaders\n}) => {\n  const [chartType, setChartType] = useState<'pie' | 'bar' | 'line' | 'table' | null>(initialChartType);\n  const [labelColumn, setLabelColumn] = useState<string | null>(null);\n  const [valueColumn, setValueColumn] = useState<string | null>(null);\n  const [isFormatted, setIsFormatted] = useState<boolean>(true);\n\n  // Map of original column names to formatted display names\n  const columnDisplayNames = React.useMemo(() => {\n    if (!formattedHeaders || formattedHeaders.length !== data.columns.length) {\n      return {};\n    }\n\n    const displayMap: Record<string, string> = {};\n    data.columns.forEach((col, index) => {\n      displayMap[col] = formattedHeaders[index];\n    });\n\n    return displayMap;\n  }, [data.columns, formattedHeaders]);\n\n  // Find numeric columns for values\n  const numericColumns = data.columns.filter(col => {\n    if (data.rows.length === 0) return false;\n    const value = data.rows[0][col];\n    return typeof value === 'number' || !isNaN(Number(value));\n  });\n\n  // Find string/categorical columns for labels\n  const categoricalColumns = data.columns.filter(col => {\n    if (data.rows.length === 0) return false;\n    const value = data.rows[0][col];\n    return typeof value === 'string' || value instanceof String;\n  });\n\n  // Check if we have enough columns for visualization\n  const hasEnoughColumnsForCharts = data.columns.length > 1;\n\n  // All columns for complete selection options\n  const allColumns = data.columns;\n\n  // Auto-select appropriate columns on mount\n  React.useEffect(() => {\n    // For bar chart, specifically select department_name and department_identifier\n    if (chartType === 'bar') {\n      // Find department_name column for label\n      const departmentNameColumn = data.columns.find(col =>\n        col.toLowerCase().includes('department_name')\n      );\n\n      // Find department_identifier column for value\n      const departmentIdColumn = data.columns.find(col =>\n        col.toLowerCase().includes('department_identifier')\n      );\n\n      // Set the columns if found\n      if (departmentNameColumn) {\n        setLabelColumn(departmentNameColumn);\n      }\n\n      if (departmentIdColumn) {\n        setValueColumn(departmentIdColumn);\n      }\n    }\n    // For other chart types, use the original auto-selection logic\n    else {\n      // Auto-select categorical column for labels\n      if (!labelColumn && categoricalColumns.length > 0) {\n        // Prefer department_name or name columns if available\n        const preferredLabelColumns = ['department_name', 'name', 'employee_first_name', 'employee_last_name'];\n        const preferredColumn = categoricalColumns.find(col =>\n          preferredLabelColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase()))\n        );\n\n        setLabelColumn(preferredColumn || categoricalColumns[0]);\n      }\n\n      // Auto-select numeric column for values\n      if (!valueColumn && numericColumns.length > 0) {\n        // Prefer salary or amount columns if available\n        const preferredValueColumns = ['salary', 'amount', 'price', 'cost', 'revenue', 'count'];\n        const preferredColumn = numericColumns.find(col =>\n          preferredValueColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase()))\n        );\n\n        setValueColumn(preferredColumn || numericColumns[0]);\n      }\n    }\n  }, [chartType, data.columns, categoricalColumns, numericColumns, labelColumn, valueColumn]);\n\n  const handleVisualize = (type: 'pie' | 'bar' | 'line' | 'table') => {\n    setChartType(type);\n\n    // Reset column selections when changing chart type\n    if (type === 'bar') {\n      // For bar chart, find department columns\n      const departmentNameColumn = data.columns.find(col =>\n        col.toLowerCase().includes('department_name')\n      );\n\n      const departmentIdColumn = data.columns.find(col =>\n        col.toLowerCase().includes('department_identifier')\n      );\n\n      // Set the columns if found\n      if (departmentNameColumn) {\n        setLabelColumn(departmentNameColumn);\n      }\n\n      if (departmentIdColumn) {\n        setValueColumn(departmentIdColumn);\n      }\n    } else if (type !== 'table') {\n      // For other chart types (except table), reset to default selections\n      // Auto-select categorical column for labels\n      if (categoricalColumns.length > 0) {\n        const preferredLabelColumns = ['department_name', 'name', 'employee_first_name', 'employee_last_name'];\n        const preferredColumn = categoricalColumns.find(col =>\n          preferredLabelColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase()))\n        );\n\n        setLabelColumn(preferredColumn || categoricalColumns[0]);\n      }\n\n      // Auto-select numeric column for values\n      if (numericColumns.length > 0) {\n        const preferredValueColumns = ['salary', 'amount', 'price', 'cost', 'revenue', 'count'];\n        const preferredColumn = numericColumns.find(col =>\n          preferredValueColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase()))\n        );\n\n        setValueColumn(preferredColumn || numericColumns[0]);\n      }\n    }\n  };\n\n  const formatValue = (value: number): string => {\n    if (isFormatted) {\n      // Check if it's likely a currency value\n      if (valueColumn?.toLowerCase().includes('salary') ||\n          valueColumn?.toLowerCase().includes('price') ||\n          valueColumn?.toLowerCase().includes('cost') ||\n          valueColumn?.toLowerCase().includes('revenue')) {\n        return `â‚¹${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n      }\n\n      // Format large numbers with commas\n      if (value >= 1000) {\n        return value.toLocaleString();\n      }\n\n      // Format percentages\n      if (valueColumn?.toLowerCase().includes('percent') || valueColumn?.toLowerCase().includes('rate')) {\n        return `${value.toFixed(2)}%`;\n      }\n    }\n\n    return String(value);\n  };\n\n  const prepareChartData = () => {\n    if (!labelColumn || !valueColumn || !data.rows.length) {\n      return {\n        labels: [],\n        datasets: [{\n          data: [],\n          backgroundColor: [],\n        }]\n      };\n    }\n\n    // Group data by label column and sum values\n    const groupedData: Record<string, number> = {};\n\n    data.rows.forEach(row => {\n      const label = String(row[labelColumn]);\n      const value = Number(row[valueColumn]);\n\n      if (!isNaN(value)) {\n        if (groupedData[label]) {\n          groupedData[label] += value;\n        } else {\n          groupedData[label] = value;\n        }\n      }\n    });\n\n    // Generate colors\n    const generateColors = (count: number) => {\n      const colors = [];\n      for (let i = 0; i < count; i++) {\n        const hue = (i * 137) % 360; // Use golden angle for nice distribution\n        colors.push(`hsl(${hue}, 70%, 60%)`);\n      }\n      return colors;\n    };\n\n    const labels = Object.keys(groupedData);\n    const values = Object.values(groupedData);\n    const colors = generateColors(labels.length);\n\n    // Get display name for the value column\n    const valueDisplayName = columnDisplayNames[valueColumn] || valueColumn;\n\n    return {\n      labels,\n      datasets: [{\n        label: valueDisplayName, // Use formatted column name\n        data: values,\n        backgroundColor: colors,\n        borderColor: colors.map(color => color.replace('60%', '50%')),\n        borderWidth: 1,\n      }]\n    };\n  };\n\n  const chartData = prepareChartData();\n\n  const renderChart = () => {\n    // For table view, we don't need label and value columns\n    if (chartType === 'table') {\n      // Continue to table rendering\n    }\n    // For chart views, we need label and value columns\n    else if (!chartType || !labelColumn || !valueColumn) {\n      return null;\n    }\n\n    // For table view, render a complete data table with all columns\n    if (chartType === 'table') {\n      return (\n        <div className=\"data-table-container\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                {data.columns.map((col, index) => (\n                  <th key={index}>\n                    {columnDisplayNames[col] || col}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {data.rows.map((row, rowIndex) => (\n                <tr key={rowIndex}>\n                  {data.columns.map((col, colIndex) => {\n                    const value = row[col];\n                    let displayValue: React.ReactNode;\n\n                    // Format values appropriately\n                    if (typeof value === 'number' && isFormatted) {\n                      if (col.toLowerCase().includes('salary') ||\n                          col.toLowerCase().includes('price') ||\n                          col.toLowerCase().includes('cost')) {\n                        displayValue = `â‚¹${value.toLocaleString()}`;\n                      } else {\n                        displayValue = value.toLocaleString();\n                      }\n                    } else if (value instanceof Date) {\n                      displayValue = value.toLocaleDateString();\n                    } else if (value === null || value === undefined) {\n                      displayValue = '-';\n                    } else {\n                      displayValue = String(value);\n                    }\n\n                    return <td key={colIndex}>{displayValue}</td>;\n                  })}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n\n    // For chart views, use Chart.js\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top' as const,\n        },\n        title: {\n          display: true,\n          text: `${valueColumn} by ${labelColumn}`,\n        },\n        tooltip: {\n          callbacks: {\n            label: function(context: any) {\n              // Different handling based on chart type\n              if (chartType === 'pie') {\n                // For pie charts, context.parsed is the raw value\n                const value = context.parsed;\n                const label = context.label || '';\n                const formattedValue = isFormatted ? formatValue(value) : value;\n                return `${label}: ${formattedValue}`;\n              } else if (chartType === 'bar' || chartType === 'line') {\n                // For bar and line charts\n                const label = context.dataset.label || '';\n                let value;\n\n                if (chartType === 'bar') {\n                  // For bar charts, the y value contains the data\n                  value = context.parsed.y;\n                } else {\n                  // For line charts, depending on orientation\n                  value = context.parsed.y;\n                }\n\n                const formattedValue = isFormatted ? formatValue(value) : value;\n                return `${label}: ${formattedValue}`;\n              }\n\n              // Fallback for any other chart type\n              return context.formattedValue;\n            },\n            // Add title callback to show the x-axis label (usually the category)\n            title: function(context: any[]) {\n              // Return the label (x-value) for the first item in the tooltip\n              return context.length > 0 ? context[0].label : '';\n            }\n          }\n        }\n      },\n      scales: chartType !== 'pie' ? {\n        y: {\n          ticks: {\n            callback: function(value: any) {\n              return isFormatted ? formatValue(value) : value;\n            }\n          }\n        }\n      } : undefined\n    };\n\n    // Create specific options for pie charts\n    const pieOptions = {\n      ...options,\n      plugins: {\n        ...options.plugins,\n        tooltip: {\n          ...options.plugins.tooltip,\n          callbacks: {\n            label: function(context: any) {\n              const label = context.label || '';\n              const value = context.raw;\n              const formattedValue = isFormatted ? formatValue(value) : value;\n\n              // Calculate percentage\n              const total = context.dataset.data.reduce((sum: number, val: number) => sum + val, 0);\n              const percentage = ((value / total) * 100).toFixed(1);\n\n              return `${label}: ${formattedValue} (${percentage}%)`;\n            }\n          }\n        }\n      }\n    };\n\n    // Create specific options for bar charts\n    const barOptions = {\n      ...options,\n      plugins: {\n        ...options.plugins,\n        tooltip: {\n          ...options.plugins.tooltip,\n          callbacks: {\n            label: function(context: any) {\n              const label = valueColumn ? (columnDisplayNames[valueColumn] || valueColumn) : '';\n              const value = context.parsed.y;\n              const formattedValue = isFormatted ? formatValue(value) : value;\n              return `${label}: ${formattedValue}`;\n            },\n            title: function(context: any[]) {\n              if (context.length > 0) {\n                const item = context[0];\n                const label = item.label || '';\n                return label;\n              }\n              return '';\n            }\n          }\n        }\n      }\n    };\n\n    // Create specific options for line charts\n    const lineOptions = {\n      ...options,\n      plugins: {\n        ...options.plugins,\n        tooltip: {\n          ...options.plugins.tooltip,\n          callbacks: {\n            label: function(context: any) {\n              const label = valueColumn ? (columnDisplayNames[valueColumn] || valueColumn) : '';\n              const value = context.parsed.y;\n              const formattedValue = isFormatted ? formatValue(value) : value;\n              return `${label}: ${formattedValue}`;\n            },\n            title: function(context: any[]) {\n              if (context.length > 0) {\n                const item = context[0];\n                const label = item.label || '';\n                return label;\n              }\n              return '';\n            }\n          }\n        }\n      }\n    };\n\n    switch (chartType) {\n      case 'pie':\n        return <Pie data={chartData} options={pieOptions} />;\n      case 'bar':\n        return <Bar data={chartData} options={barOptions} />;\n      case 'line':\n        return <Line data={chartData} options={lineOptions} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"data-visualization\">\n      <div className=\"visualization-controls\">\n        <div style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '0.5rem',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '1rem'\n        }}>\n          <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\n            {/* Only show chart options if we have enough columns */}\n            {data.columns.length > 1 && (\n              <>\n                <button\n                  onClick={() => handleVisualize('bar')}\n                  style={{\n                    backgroundColor: chartType === 'bar' ? 'var(--accent-color)' : '#f0f0f0',\n                    color: chartType === 'bar' ? 'white' : 'var(--text-primary)',\n                  }}\n                >\n                  Bar Chart\n                </button>\n                <button\n                  onClick={() => handleVisualize('pie')}\n                  style={{\n                    backgroundColor: chartType === 'pie' ? 'var(--accent-color)' : '#f0f0f0',\n                    color: chartType === 'pie' ? 'white' : 'var(--text-primary)',\n                  }}\n                >\n                  Pie Chart\n                </button>\n                <button\n                  onClick={() => handleVisualize('line')}\n                  style={{\n                    backgroundColor: chartType === 'line' ? 'var(--accent-color)' : '#f0f0f0',\n                    color: chartType === 'line' ? 'white' : 'var(--text-primary)',\n                  }}\n                >\n                  Line Chart\n                </button>\n              </>\n            )}\n            <button\n              onClick={() => handleVisualize('table')}\n              style={{\n                backgroundColor: chartType === 'table' ? 'var(--accent-color)' : '#f0f0f0',\n                color: chartType === 'table' ? 'white' : 'var(--text-primary)',\n              }}\n            >\n              Table\n            </button>\n          </div>\n\n          <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>\n            {/* Only show controls for bar chart */}\n            {chartType === 'bar' && (\n              <>\n                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n                  <label>Label:</label>\n                  <select\n                    value={labelColumn || ''}\n                    onChange={(e) => setLabelColumn(e.target.value)}\n                    style={{ padding: '0.25rem' }}\n                  >\n                    <option value=\"\">Select</option>\n                    {/* Only show Department option for Label */}\n                    {allColumns\n                      .filter(col => col.toLowerCase().includes('department_name'))\n                      .map(col => (\n                        <option key={col} value={col}>{columnDisplayNames[col] || col}</option>\n                      ))\n                    }\n                  </select>\n                </div>\n\n                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n                  <label>Value:</label>\n                  <select\n                    value={valueColumn || ''}\n                    onChange={(e) => setValueColumn(e.target.value)}\n                    style={{ padding: '0.25rem' }}\n                  >\n                    <option value=\"\">Select</option>\n                    {/* Only show Department ID option for Value */}\n                    {allColumns\n                      .filter(col => col.toLowerCase().includes('department_identifier'))\n                      .map(col => (\n                        <option key={col} value={col}>{columnDisplayNames[col] || col}</option>\n                      ))\n                    }\n                  </select>\n                </div>\n              </>\n            )}\n\n            {/* For other chart types, show all options */}\n            {chartType !== 'bar' && chartType !== 'table' && (\n              <>\n                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n                  <label>Label:</label>\n                  <select\n                    value={labelColumn || ''}\n                    onChange={(e) => setLabelColumn(e.target.value)}\n                    style={{ padding: '0.25rem' }}\n                  >\n                    <option value=\"\">Select</option>\n                    {allColumns.map(col => (\n                      <option key={col} value={col}>{columnDisplayNames[col] || col}</option>\n                    ))}\n                  </select>\n                </div>\n\n                <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n                  <label>Value:</label>\n                  <select\n                    value={valueColumn || ''}\n                    onChange={(e) => setValueColumn(e.target.value)}\n                    style={{ padding: '0.25rem' }}\n                  >\n                    <option value=\"\">Select</option>\n                    {allColumns.map(col => (\n                      <option key={col} value={col}>{columnDisplayNames[col] || col}</option>\n                    ))}\n                  </select>\n                </div>\n              </>\n            )}\n\n            {/* Only show Raw Values button for bar chart */}\n            {chartType === 'bar' && (\n              <button\n                onClick={() => setIsFormatted(!isFormatted)}\n                style={{\n                  backgroundColor: isFormatted ? 'var(--accent-color)' : '#f0f0f0',\n                  color: isFormatted ? 'white' : 'var(--text-primary)',\n                }}\n              >\n                {isFormatted ? 'Raw Values' : 'Format Values'}\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"chart-container\">\n        {renderChart()}\n      </div>\n    </div>\n  );\n};\n\nexport default DataVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}