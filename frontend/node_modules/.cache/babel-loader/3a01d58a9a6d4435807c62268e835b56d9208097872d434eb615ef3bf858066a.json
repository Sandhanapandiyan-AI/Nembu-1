{"ast":null,"code":"var _jsxFileName = \"E:\\\\test project\\\\frontend\\\\src\\\\components\\\\VoiceInput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './VoiceInput.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst VoiceInput = ({\n  onSpeechResult,\n  disabled = false\n}) => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [speechRecognition, setSpeechRecognition] = useState(null);\n  const [animationLevel, setAnimationLevel] = useState(0);\n  const [voiceAmplitude, setVoiceAmplitude] = useState([0, 0, 0, 0, 0]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [recognitionState, setRecognitionState] = useState('idle');\n  const [interimTranscript, setInterimTranscript] = useState('');\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const mediaStreamRef = useRef(null);\n  const startTimeRef = useRef(0);\n\n  // Audio processing for voice visualization\n  const setupAudioProcessing = async () => {\n    try {\n      // Create audio context\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      audioContextRef.current = audioContext;\n\n      // Get microphone stream\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaStreamRef.current = stream;\n\n      // Create analyser node\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 32; // Small FFT size for performance\n      analyserRef.current = analyser;\n\n      // Connect microphone to analyser\n      const source = audioContext.createMediaStreamSource(stream);\n      source.connect(analyser);\n\n      // Start visualization loop\n      visualizeAudio();\n    } catch (err) {\n      console.error('Error setting up audio visualization:', err);\n      setErrorMessage('Could not access microphone for visualization');\n    }\n  };\n\n  // Clean up audio processing\n  const cleanupAudioProcessing = () => {\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n    }\n    if (audioContextRef.current) {\n      audioContextRef.current.close().catch(err => {\n        console.error('Error closing audio context:', err);\n      });\n      audioContextRef.current = null;\n    }\n    analyserRef.current = null;\n    setVoiceAmplitude([0, 0, 0, 0, 0]);\n  };\n\n  // Visualize audio data\n  const visualizeAudio = () => {\n    if (!analyserRef.current || !isListening) return;\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const updateAmplitude = () => {\n      if (!analyserRef.current || !isListening) return;\n\n      // Get frequency data\n      analyserRef.current.getByteFrequencyData(dataArray);\n\n      // Calculate average amplitude from different frequency ranges\n      const bass = dataArray.slice(0, 3).reduce((a, b) => a + b, 0) / 3;\n      const midLow = dataArray.slice(3, 6).reduce((a, b) => a + b, 0) / 3;\n      const mid = dataArray.slice(6, 9).reduce((a, b) => a + b, 0) / 3;\n      const midHigh = dataArray.slice(9, 12).reduce((a, b) => a + b, 0) / 3;\n      const high = dataArray.slice(12, 15).reduce((a, b) => a + b, 0) / 3;\n\n      // Normalize values (0-1)\n      const normalized = [bass / 255, midLow / 255, mid / 255, midHigh / 255, high / 255];\n      setVoiceAmplitude(normalized);\n\n      // Continue animation loop\n      requestAnimationFrame(updateAmplitude);\n    };\n    updateAmplitude();\n  };\n\n  // Animation effect\n  useEffect(() => {\n    let animationInterval = null;\n    if (isListening) {\n      // Set up audio processing for visualization\n      setupAudioProcessing();\n\n      // Fallback animation for wave effect\n      animationInterval = setInterval(() => {\n        setAnimationLevel(prev => (prev + 1) % 4); // Cycle through 0-3\n      }, 300);\n    } else {\n      // Clean up audio processing\n      cleanupAudioProcessing();\n      if (animationInterval) {\n        clearInterval(animationInterval);\n        setAnimationLevel(0);\n      }\n    }\n    return () => {\n      if (animationInterval) clearInterval(animationInterval);\n      cleanupAudioProcessing();\n    };\n  }, [isListening]);\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      // Check if browser supports speech recognition\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (SpeechRecognition) {\n        const recognition = new SpeechRecognition();\n        recognition.continuous = true;\n        recognition.interimResults = true;\n        recognition.lang = 'en-US';\n\n        // Handle interim results (while speaking)\n        recognition.onresult = event => {\n          let finalTranscript = '';\n          let interimTranscript = '';\n\n          // Process results\n          for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n            if (event.results[i].isFinal) {\n              finalTranscript += transcript;\n              setRecognitionState('processing');\n            } else {\n              interimTranscript += transcript;\n            }\n          }\n\n          // Update interim transcript for display\n          if (interimTranscript) {\n            setInterimTranscript(interimTranscript);\n          }\n\n          // If we have a final result, send it\n          if (finalTranscript) {\n            // Calculate speech speed (words per minute)\n            const wordCount = finalTranscript.split(/\\s+/).length;\n            const speechDuration = (Date.now() - startTimeRef.current) / 1000 / 60; // in minutes\n            const wordsPerMinute = Math.round(wordCount / speechDuration);\n\n            // Send the result with metadata\n            onSpeechResult(finalTranscript);\n\n            // Log speech analytics\n            console.log(`Speech detected: ${finalTranscript}`);\n            console.log(`Speech duration: ${(speechDuration * 60).toFixed(2)} seconds`);\n            console.log(`Words per minute: ${wordsPerMinute}`);\n\n            // Reset state\n            setInterimTranscript('');\n            setRecognitionState('idle');\n            setIsListening(false);\n          }\n        };\n        recognition.onerror = event => {\n          console.error('Speech recognition error', event.error);\n          let errorMsg = 'Error with speech recognition';\n\n          // Provide more specific error messages\n          switch (event.error) {\n            case 'no-speech':\n              errorMsg = 'No speech detected. Please try speaking again.';\n              break;\n            case 'aborted':\n              errorMsg = 'Speech recognition was aborted.';\n              break;\n            case 'audio-capture':\n              errorMsg = 'Could not capture audio. Please check your microphone.';\n              break;\n            case 'network':\n              errorMsg = 'Network error occurred. Please check your connection.';\n              break;\n            case 'not-allowed':\n              errorMsg = 'Microphone access denied. Please allow microphone access.';\n              break;\n            case 'service-not-allowed':\n              errorMsg = 'Speech recognition service not allowed.';\n              break;\n            case 'bad-grammar':\n              errorMsg = 'Grammar error in speech recognition.';\n              break;\n            case 'language-not-supported':\n              errorMsg = 'Language not supported for speech recognition.';\n              break;\n            default:\n              errorMsg = `Error: ${event.error}`;\n          }\n          setErrorMessage(errorMsg);\n          setRecognitionState('error');\n          setIsListening(false);\n        };\n        recognition.onstart = () => {\n          setRecognitionState('listening');\n          startTimeRef.current = Date.now();\n          console.log('Speech recognition started');\n        };\n        recognition.onend = () => {\n          if (recognitionState === 'listening') {\n            setRecognitionState('idle');\n          }\n          setIsListening(false);\n          console.log('Speech recognition ended');\n        };\n        setSpeechRecognition(recognition);\n      } else {\n        setErrorMessage('Speech recognition not supported in this browser');\n        setRecognitionState('error');\n      }\n    }\n  }, [onSpeechResult, recognitionState]);\n  const toggleListening = () => {\n    if (disabled || !speechRecognition) return;\n    if (isListening) {\n      // Stop listening\n      speechRecognition.stop();\n      setIsListening(false);\n      setRecognitionState('idle');\n      setInterimTranscript('');\n    } else {\n      // Start listening\n      setErrorMessage(null);\n      setRecognitionState('listening');\n      startTimeRef.current = Date.now();\n      try {\n        speechRecognition.start();\n        setIsListening(true);\n      } catch (error) {\n        console.error('Error starting speech recognition:', error);\n        setErrorMessage('Failed to start speech recognition. Please try again.');\n        setRecognitionState('error');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voice-input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `voice-input-button ${isListening ? 'listening' : ''} ${disabled ? 'disabled' : ''}`,\n      onClick: toggleListening,\n      disabled: disabled || !speechRecognition,\n      title: errorMessage || (isListening ? 'Tap to stop' : 'Tap to speak'),\n      \"aria-label\": \"Voice input\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"microphone-svg\",\n        width: \"24\",\n        height: \"24\",\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: \"9\",\n          y: \"2\",\n          width: \"6\",\n          height: \"12\",\n          rx: \"3\",\n          fill: isListening ? \"#FFFFFF\" : \"#555555\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M5 10V11C5 14.866 8.13401 18 12 18V18C15.866 18 19 14.866 19 11V10\",\n          stroke: isListening ? \"#FFFFFF\" : \"#555555\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: \"12\",\n          y1: \"18\",\n          x2: \"12\",\n          y2: \"22\",\n          stroke: isListening ? \"#FFFFFF\" : \"#555555\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: \"8\",\n          y1: \"22\",\n          x2: \"16\",\n          y2: \"22\",\n          stroke: isListening ? \"#FFFFFF\" : \"#555555\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), isListening && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"voice-amplitude\",\n          children: voiceAmplitude.map((level, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"amplitude-bar\",\n            style: {\n              height: `${Math.max(3, level * 30)}px`,\n              opacity: Math.max(0.4, level),\n              backgroundColor: `hsl(${210 + index * 15}, 80%, ${50 + level * 25}%)`,\n              transform: `scaleY(${1 + level * 0.2})`\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"sound-waves\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `wave wave-1 ${animationLevel >= 1 ? 'active' : ''}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `wave wave-2 ${animationLevel >= 2 ? 'active' : ''}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `wave wave-3 ${animationLevel >= 3 ? 'active' : ''}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-input-error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceInput, \"Ci7kN+RtANiHgmaDGoRgKdEx3+A=\");\n_c = VoiceInput;\nexport default VoiceInput;\nvar _c;\n$RefreshReg$(_c, \"VoiceInput\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","VoiceInput","onSpeechResult","disabled","_s","isListening","setIsListening","speechRecognition","setSpeechRecognition","animationLevel","setAnimationLevel","voiceAmplitude","setVoiceAmplitude","errorMessage","setErrorMessage","recognitionState","setRecognitionState","interimTranscript","setInterimTranscript","audioContextRef","analyserRef","mediaStreamRef","startTimeRef","setupAudioProcessing","audioContext","window","AudioContext","webkitAudioContext","current","stream","navigator","mediaDevices","getUserMedia","audio","analyser","createAnalyser","fftSize","source","createMediaStreamSource","connect","visualizeAudio","err","console","error","cleanupAudioProcessing","getTracks","forEach","track","stop","close","catch","bufferLength","frequencyBinCount","dataArray","Uint8Array","updateAmplitude","getByteFrequencyData","bass","slice","reduce","a","b","midLow","mid","midHigh","high","normalized","requestAnimationFrame","animationInterval","setInterval","prev","clearInterval","SpeechRecognition","webkitSpeechRecognition","recognition","continuous","interimResults","lang","onresult","event","finalTranscript","i","resultIndex","results","length","transcript","isFinal","wordCount","split","speechDuration","Date","now","wordsPerMinute","Math","round","log","toFixed","onerror","errorMsg","onstart","onend","toggleListening","start","className","children","onClick","title","width","height","viewBox","fill","xmlns","x","y","rx","fileName","_jsxFileName","lineNumber","columnNumber","d","stroke","strokeWidth","strokeLinecap","x1","y1","x2","y2","map","level","index","style","max","opacity","backgroundColor","transform","_c","$RefreshReg$"],"sources":["E:/test project/frontend/src/components/VoiceInput.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './VoiceInput.css';\n\ninterface VoiceInputProps {\n  onSpeechResult: (text: string) => void;\n  disabled?: boolean;\n}\n\nconst VoiceInput: React.FC<VoiceInputProps> = ({ onSpeechResult, disabled = false }) => {\n  const [isListening, setIsListening] = useState(false);\n  const [speechRecognition, setSpeechRecognition] = useState<SpeechRecognition | null>(null);\n  const [animationLevel, setAnimationLevel] = useState(0);\n  const [voiceAmplitude, setVoiceAmplitude] = useState<number[]>([0, 0, 0, 0, 0]);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [recognitionState, setRecognitionState] = useState<'idle' | 'listening' | 'processing' | 'error'>('idle');\n  const [interimTranscript, setInterimTranscript] = useState<string>('');\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const mediaStreamRef = useRef<MediaStream | null>(null);\n  const startTimeRef = useRef<number>(0);\n\n  // Audio processing for voice visualization\n  const setupAudioProcessing = async () => {\n    try {\n      // Create audio context\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      audioContextRef.current = audioContext;\n\n      // Get microphone stream\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaStreamRef.current = stream;\n\n      // Create analyser node\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 32; // Small FFT size for performance\n      analyserRef.current = analyser;\n\n      // Connect microphone to analyser\n      const source = audioContext.createMediaStreamSource(stream);\n      source.connect(analyser);\n\n      // Start visualization loop\n      visualizeAudio();\n    } catch (err) {\n      console.error('Error setting up audio visualization:', err);\n      setErrorMessage('Could not access microphone for visualization');\n    }\n  };\n\n  // Clean up audio processing\n  const cleanupAudioProcessing = () => {\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach((track: MediaStreamTrack) => track.stop());\n      mediaStreamRef.current = null;\n    }\n\n    if (audioContextRef.current) {\n      audioContextRef.current.close().catch(err => {\n        console.error('Error closing audio context:', err);\n      });\n      audioContextRef.current = null;\n    }\n\n    analyserRef.current = null;\n    setVoiceAmplitude([0, 0, 0, 0, 0]);\n  };\n\n  // Visualize audio data\n  const visualizeAudio = () => {\n    if (!analyserRef.current || !isListening) return;\n\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n\n    const updateAmplitude = () => {\n      if (!analyserRef.current || !isListening) return;\n\n      // Get frequency data\n      analyserRef.current.getByteFrequencyData(dataArray);\n\n      // Calculate average amplitude from different frequency ranges\n      const bass = dataArray.slice(0, 3).reduce((a, b) => a + b, 0) / 3;\n      const midLow = dataArray.slice(3, 6).reduce((a, b) => a + b, 0) / 3;\n      const mid = dataArray.slice(6, 9).reduce((a, b) => a + b, 0) / 3;\n      const midHigh = dataArray.slice(9, 12).reduce((a, b) => a + b, 0) / 3;\n      const high = dataArray.slice(12, 15).reduce((a, b) => a + b, 0) / 3;\n\n      // Normalize values (0-1)\n      const normalized = [\n        bass / 255,\n        midLow / 255,\n        mid / 255,\n        midHigh / 255,\n        high / 255\n      ];\n\n      setVoiceAmplitude(normalized);\n\n      // Continue animation loop\n      requestAnimationFrame(updateAmplitude);\n    };\n\n    updateAmplitude();\n  };\n\n  // Animation effect\n  useEffect(() => {\n    let animationInterval: NodeJS.Timeout | null = null;\n\n    if (isListening) {\n      // Set up audio processing for visualization\n      setupAudioProcessing();\n\n      // Fallback animation for wave effect\n      animationInterval = setInterval(() => {\n        setAnimationLevel(prev => (prev + 1) % 4); // Cycle through 0-3\n      }, 300);\n    } else {\n      // Clean up audio processing\n      cleanupAudioProcessing();\n\n      if (animationInterval) {\n        clearInterval(animationInterval);\n        setAnimationLevel(0);\n      }\n    }\n\n    return () => {\n      if (animationInterval) clearInterval(animationInterval);\n      cleanupAudioProcessing();\n    };\n  }, [isListening]);\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      // Check if browser supports speech recognition\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n      if (SpeechRecognition) {\n        const recognition = new SpeechRecognition();\n        recognition.continuous = true;\n        recognition.interimResults = true;\n        recognition.lang = 'en-US';\n\n        // Handle interim results (while speaking)\n        recognition.onresult = (event) => {\n          let finalTranscript = '';\n          let interimTranscript = '';\n\n          // Process results\n          for (let i = event.resultIndex; i < event.results.length; i++) {\n            const transcript = event.results[i][0].transcript;\n\n            if (event.results[i].isFinal) {\n              finalTranscript += transcript;\n              setRecognitionState('processing');\n            } else {\n              interimTranscript += transcript;\n            }\n          }\n\n          // Update interim transcript for display\n          if (interimTranscript) {\n            setInterimTranscript(interimTranscript);\n          }\n\n          // If we have a final result, send it\n          if (finalTranscript) {\n            // Calculate speech speed (words per minute)\n            const wordCount = finalTranscript.split(/\\s+/).length;\n            const speechDuration = (Date.now() - startTimeRef.current) / 1000 / 60; // in minutes\n            const wordsPerMinute = Math.round(wordCount / speechDuration);\n\n            // Send the result with metadata\n            onSpeechResult(finalTranscript);\n\n            // Log speech analytics\n            console.log(`Speech detected: ${finalTranscript}`);\n            console.log(`Speech duration: ${(speechDuration * 60).toFixed(2)} seconds`);\n            console.log(`Words per minute: ${wordsPerMinute}`);\n\n            // Reset state\n            setInterimTranscript('');\n            setRecognitionState('idle');\n            setIsListening(false);\n          }\n        };\n\n        recognition.onerror = (event) => {\n          console.error('Speech recognition error', event.error);\n\n          let errorMsg = 'Error with speech recognition';\n\n          // Provide more specific error messages\n          switch (event.error) {\n            case 'no-speech':\n              errorMsg = 'No speech detected. Please try speaking again.';\n              break;\n            case 'aborted':\n              errorMsg = 'Speech recognition was aborted.';\n              break;\n            case 'audio-capture':\n              errorMsg = 'Could not capture audio. Please check your microphone.';\n              break;\n            case 'network':\n              errorMsg = 'Network error occurred. Please check your connection.';\n              break;\n            case 'not-allowed':\n              errorMsg = 'Microphone access denied. Please allow microphone access.';\n              break;\n            case 'service-not-allowed':\n              errorMsg = 'Speech recognition service not allowed.';\n              break;\n            case 'bad-grammar':\n              errorMsg = 'Grammar error in speech recognition.';\n              break;\n            case 'language-not-supported':\n              errorMsg = 'Language not supported for speech recognition.';\n              break;\n            default:\n              errorMsg = `Error: ${event.error}`;\n          }\n\n          setErrorMessage(errorMsg);\n          setRecognitionState('error');\n          setIsListening(false);\n        };\n\n        recognition.onstart = () => {\n          setRecognitionState('listening');\n          startTimeRef.current = Date.now();\n          console.log('Speech recognition started');\n        };\n\n        recognition.onend = () => {\n          if (recognitionState === 'listening') {\n            setRecognitionState('idle');\n          }\n          setIsListening(false);\n          console.log('Speech recognition ended');\n        };\n\n        setSpeechRecognition(recognition);\n      } else {\n        setErrorMessage('Speech recognition not supported in this browser');\n        setRecognitionState('error');\n      }\n    }\n  }, [onSpeechResult, recognitionState]);\n\n  const toggleListening = () => {\n    if (disabled || !speechRecognition) return;\n\n    if (isListening) {\n      // Stop listening\n      speechRecognition.stop();\n      setIsListening(false);\n      setRecognitionState('idle');\n      setInterimTranscript('');\n    } else {\n      // Start listening\n      setErrorMessage(null);\n      setRecognitionState('listening');\n      startTimeRef.current = Date.now();\n\n      try {\n        speechRecognition.start();\n        setIsListening(true);\n      } catch (error) {\n        console.error('Error starting speech recognition:', error);\n        setErrorMessage('Failed to start speech recognition. Please try again.');\n        setRecognitionState('error');\n      }\n    }\n  };\n\n  return (\n    <div className=\"voice-input-container\">\n      <button\n        className={`voice-input-button ${isListening ? 'listening' : ''} ${disabled ? 'disabled' : ''}`}\n        onClick={toggleListening}\n        disabled={disabled || !speechRecognition}\n        title={errorMessage || (isListening ? 'Tap to stop' : 'Tap to speak')}\n        aria-label=\"Voice input\"\n      >\n        <svg\n          className=\"microphone-svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {/* Microphone body */}\n          <rect\n            x=\"9\"\n            y=\"2\"\n            width=\"6\"\n            height=\"12\"\n            rx=\"3\"\n            fill={isListening ? \"#FFFFFF\" : \"#555555\"}\n          />\n          {/* Microphone base */}\n          <path\n            d=\"M5 10V11C5 14.866 8.13401 18 12 18V18C15.866 18 19 14.866 19 11V10\"\n            stroke={isListening ? \"#FFFFFF\" : \"#555555\"}\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n          />\n          {/* Microphone stand */}\n          <line\n            x1=\"12\"\n            y1=\"18\"\n            x2=\"12\"\n            y2=\"22\"\n            stroke={isListening ? \"#FFFFFF\" : \"#555555\"}\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n          />\n          {/* Microphone base */}\n          <line\n            x1=\"8\"\n            y1=\"22\"\n            x2=\"16\"\n            y2=\"22\"\n            stroke={isListening ? \"#FFFFFF\" : \"#555555\"}\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n          />\n        </svg>\n        {isListening && (\n          <>\n            {/* Voice amplitude visualization */}\n            <div className=\"voice-amplitude\">\n              {voiceAmplitude.map((level, index) => (\n                <div\n                  key={index}\n                  className=\"amplitude-bar\"\n                  style={{\n                    height: `${Math.max(3, level * 30)}px`,\n                    opacity: Math.max(0.4, level),\n                    backgroundColor: `hsl(${210 + index * 15}, 80%, ${50 + level * 25}%)`,\n                    transform: `scaleY(${1 + level * 0.2})`\n                  }}\n                ></div>\n              ))}\n            </div>\n\n            {/* Fallback sound waves animation */}\n            <div className=\"sound-waves\">\n              <div className={`wave wave-1 ${animationLevel >= 1 ? 'active' : ''}`}></div>\n              <div className={`wave wave-2 ${animationLevel >= 2 ? 'active' : ''}`}></div>\n              <div className={`wave wave-3 ${animationLevel >= 3 ? 'active' : ''}`}></div>\n            </div>\n          </>\n        )}\n      </button>\n      {errorMessage && <div className=\"voice-input-error\">{errorMessage}</div>}\n    </div>\n  );\n};\n\nexport default VoiceInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}