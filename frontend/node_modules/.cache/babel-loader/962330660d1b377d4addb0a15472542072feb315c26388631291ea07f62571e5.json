{"ast":null,"code":"var _jsxFileName = \"E:\\\\test project\\\\frontend\\\\src\\\\components\\\\VoiceInput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './VoiceInput.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceInput = ({\n  onSpeechResult,\n  disabled = false\n}) => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [speechRecognition, setSpeechRecognition] = useState(null);\n  const [animationLevel, setAnimationLevel] = useState(0);\n  const [voiceAmplitude, setVoiceAmplitude] = useState([0, 0, 0, 0, 0]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const audioContextRef = useRef(null);\n  const analyserRef = useRef(null);\n  const mediaStreamRef = useRef(null);\n\n  // Audio processing for voice visualization\n  const setupAudioProcessing = async () => {\n    try {\n      // Create audio context\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      audioContextRef.current = audioContext;\n\n      // Get microphone stream\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaStreamRef.current = stream;\n\n      // Create analyser node\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 32; // Small FFT size for performance\n      analyserRef.current = analyser;\n\n      // Connect microphone to analyser\n      const source = audioContext.createMediaStreamSource(stream);\n      source.connect(analyser);\n\n      // Start visualization loop\n      visualizeAudio();\n    } catch (err) {\n      console.error('Error setting up audio visualization:', err);\n      setErrorMessage('Could not access microphone for visualization');\n    }\n  };\n\n  // Clean up audio processing\n  const cleanupAudioProcessing = () => {\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n    }\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n      audioContextRef.current = null;\n    }\n    analyserRef.current = null;\n    setVoiceAmplitude([0, 0, 0, 0, 0]);\n  };\n\n  // Visualize audio data\n  const visualizeAudio = () => {\n    if (!analyserRef.current || !isListening) return;\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    const updateAmplitude = () => {\n      if (!analyserRef.current || !isListening) return;\n\n      // Get frequency data\n      analyserRef.current.getByteFrequencyData(dataArray);\n\n      // Calculate average amplitude from different frequency ranges\n      const bass = dataArray.slice(0, 3).reduce((a, b) => a + b, 0) / 3;\n      const midLow = dataArray.slice(3, 6).reduce((a, b) => a + b, 0) / 3;\n      const mid = dataArray.slice(6, 9).reduce((a, b) => a + b, 0) / 3;\n      const midHigh = dataArray.slice(9, 12).reduce((a, b) => a + b, 0) / 3;\n      const high = dataArray.slice(12, 15).reduce((a, b) => a + b, 0) / 3;\n\n      // Normalize values (0-1)\n      const normalized = [bass / 255, midLow / 255, mid / 255, midHigh / 255, high / 255];\n      setVoiceAmplitude(normalized);\n\n      // Continue animation loop\n      requestAnimationFrame(updateAmplitude);\n    };\n    updateAmplitude();\n  };\n\n  // Animation effect\n  useEffect(() => {\n    let animationInterval = null;\n    if (isListening) {\n      // Set up audio processing for visualization\n      setupAudioProcessing();\n\n      // Fallback animation for wave effect\n      animationInterval = setInterval(() => {\n        setAnimationLevel(prev => (prev + 1) % 4); // Cycle through 0-3\n      }, 300);\n    } else {\n      // Clean up audio processing\n      cleanupAudioProcessing();\n      if (animationInterval) {\n        clearInterval(animationInterval);\n        setAnimationLevel(0);\n      }\n    }\n    return () => {\n      if (animationInterval) clearInterval(animationInterval);\n      cleanupAudioProcessing();\n    };\n  }, [isListening]);\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      // Check if browser supports speech recognition\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      if (SpeechRecognition) {\n        const recognition = new SpeechRecognition();\n        recognition.continuous = false;\n        recognition.interimResults = false;\n        recognition.lang = 'en-US';\n        recognition.onresult = event => {\n          const transcript = event.results[0][0].transcript;\n          onSpeechResult(transcript);\n          setIsListening(false);\n        };\n        recognition.onerror = event => {\n          console.error('Speech recognition error', event.error);\n          setErrorMessage(`Error: ${event.error}`);\n          setIsListening(false);\n        };\n        recognition.onend = () => {\n          setIsListening(false);\n        };\n        setSpeechRecognition(recognition);\n      } else {\n        setErrorMessage('Speech recognition not supported in this browser');\n      }\n    }\n  }, [onSpeechResult]);\n  const toggleListening = () => {\n    if (disabled || !speechRecognition) return;\n    if (isListening) {\n      speechRecognition.stop();\n      setIsListening(false);\n    } else {\n      setErrorMessage(null);\n      speechRecognition.start();\n      setIsListening(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voice-input-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `voice-input-button ${isListening ? 'listening' : ''} ${disabled ? 'disabled' : ''}`,\n      onClick: toggleListening,\n      disabled: disabled || !speechRecognition,\n      title: errorMessage || (isListening ? 'Tap to stop' : 'Tap to speak'),\n      \"aria-label\": \"Voice input\",\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"microphone-svg\",\n        width: \"24\",\n        height: \"24\",\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: \"9\",\n          y: \"2\",\n          width: \"6\",\n          height: \"12\",\n          rx: \"3\",\n          fill: isListening ? \"#FFFFFF\" : \"#555555\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M5 10V11C5 14.866 8.13401 18 12 18V18C15.866 18 19 14.866 19 11V10\",\n          stroke: isListening ? \"#FFFFFF\" : \"#555555\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: \"12\",\n          y1: \"18\",\n          x2: \"12\",\n          y2: \"22\",\n          stroke: isListening ? \"#FFFFFF\" : \"#555555\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: \"8\",\n          y1: \"22\",\n          x2: \"16\",\n          y2: \"22\",\n          stroke: isListening ? \"#FFFFFF\" : \"#555555\",\n          strokeWidth: \"2\",\n          strokeLinecap: \"round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), isListening && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sound-waves\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `wave wave-1 ${animationLevel >= 1 ? 'active' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `wave wave-2 ${animationLevel >= 2 ? 'active' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `wave wave-3 ${animationLevel >= 3 ? 'active' : ''}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-input-error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceInput, \"gaUzU8QfXks+gPqUmeQARFsDCQM=\");\n_c = VoiceInput;\nexport default VoiceInput;\nvar _c;\n$RefreshReg$(_c, \"VoiceInput\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","VoiceInput","onSpeechResult","disabled","_s","isListening","setIsListening","speechRecognition","setSpeechRecognition","animationLevel","setAnimationLevel","voiceAmplitude","setVoiceAmplitude","errorMessage","setErrorMessage","audioContextRef","useRef","analyserRef","mediaStreamRef","setupAudioProcessing","audioContext","window","AudioContext","webkitAudioContext","current","stream","navigator","mediaDevices","getUserMedia","audio","analyser","createAnalyser","fftSize","source","createMediaStreamSource","connect","visualizeAudio","err","console","error","cleanupAudioProcessing","getTracks","forEach","track","stop","close","bufferLength","frequencyBinCount","dataArray","Uint8Array","updateAmplitude","getByteFrequencyData","bass","slice","reduce","a","b","midLow","mid","midHigh","high","normalized","requestAnimationFrame","animationInterval","setInterval","prev","clearInterval","SpeechRecognition","webkitSpeechRecognition","recognition","continuous","interimResults","lang","onresult","event","transcript","results","onerror","onend","toggleListening","start","className","children","onClick","title","width","height","viewBox","fill","xmlns","x","y","rx","fileName","_jsxFileName","lineNumber","columnNumber","d","stroke","strokeWidth","strokeLinecap","x1","y1","x2","y2","_c","$RefreshReg$"],"sources":["E:/test project/frontend/src/components/VoiceInput.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './VoiceInput.css';\n\ninterface VoiceInputProps {\n  onSpeechResult: (text: string) => void;\n  disabled?: boolean;\n}\n\nconst VoiceInput: React.FC<VoiceInputProps> = ({ onSpeechResult, disabled = false }) => {\n  const [isListening, setIsListening] = useState(false);\n  const [speechRecognition, setSpeechRecognition] = useState<SpeechRecognition | null>(null);\n  const [animationLevel, setAnimationLevel] = useState(0);\n  const [voiceAmplitude, setVoiceAmplitude] = useState<number[]>([0, 0, 0, 0, 0]);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const analyserRef = useRef<AnalyserNode | null>(null);\n  const mediaStreamRef = useRef<MediaStream | null>(null);\n\n  // Audio processing for voice visualization\n  const setupAudioProcessing = async () => {\n    try {\n      // Create audio context\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      audioContextRef.current = audioContext;\n\n      // Get microphone stream\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaStreamRef.current = stream;\n\n      // Create analyser node\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 32; // Small FFT size for performance\n      analyserRef.current = analyser;\n\n      // Connect microphone to analyser\n      const source = audioContext.createMediaStreamSource(stream);\n      source.connect(analyser);\n\n      // Start visualization loop\n      visualizeAudio();\n    } catch (err) {\n      console.error('Error setting up audio visualization:', err);\n      setErrorMessage('Could not access microphone for visualization');\n    }\n  };\n\n  // Clean up audio processing\n  const cleanupAudioProcessing = () => {\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n    }\n\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n      audioContextRef.current = null;\n    }\n\n    analyserRef.current = null;\n    setVoiceAmplitude([0, 0, 0, 0, 0]);\n  };\n\n  // Visualize audio data\n  const visualizeAudio = () => {\n    if (!analyserRef.current || !isListening) return;\n\n    const bufferLength = analyserRef.current.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n\n    const updateAmplitude = () => {\n      if (!analyserRef.current || !isListening) return;\n\n      // Get frequency data\n      analyserRef.current.getByteFrequencyData(dataArray);\n\n      // Calculate average amplitude from different frequency ranges\n      const bass = dataArray.slice(0, 3).reduce((a, b) => a + b, 0) / 3;\n      const midLow = dataArray.slice(3, 6).reduce((a, b) => a + b, 0) / 3;\n      const mid = dataArray.slice(6, 9).reduce((a, b) => a + b, 0) / 3;\n      const midHigh = dataArray.slice(9, 12).reduce((a, b) => a + b, 0) / 3;\n      const high = dataArray.slice(12, 15).reduce((a, b) => a + b, 0) / 3;\n\n      // Normalize values (0-1)\n      const normalized = [\n        bass / 255,\n        midLow / 255,\n        mid / 255,\n        midHigh / 255,\n        high / 255\n      ];\n\n      setVoiceAmplitude(normalized);\n\n      // Continue animation loop\n      requestAnimationFrame(updateAmplitude);\n    };\n\n    updateAmplitude();\n  };\n\n  // Animation effect\n  useEffect(() => {\n    let animationInterval: NodeJS.Timeout | null = null;\n\n    if (isListening) {\n      // Set up audio processing for visualization\n      setupAudioProcessing();\n\n      // Fallback animation for wave effect\n      animationInterval = setInterval(() => {\n        setAnimationLevel(prev => (prev + 1) % 4); // Cycle through 0-3\n      }, 300);\n    } else {\n      // Clean up audio processing\n      cleanupAudioProcessing();\n\n      if (animationInterval) {\n        clearInterval(animationInterval);\n        setAnimationLevel(0);\n      }\n    }\n\n    return () => {\n      if (animationInterval) clearInterval(animationInterval);\n      cleanupAudioProcessing();\n    };\n  }, [isListening]);\n\n  // Initialize speech recognition\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      // Check if browser supports speech recognition\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n\n      if (SpeechRecognition) {\n        const recognition = new SpeechRecognition();\n        recognition.continuous = false;\n        recognition.interimResults = false;\n        recognition.lang = 'en-US';\n\n        recognition.onresult = (event) => {\n          const transcript = event.results[0][0].transcript;\n          onSpeechResult(transcript);\n          setIsListening(false);\n        };\n\n        recognition.onerror = (event) => {\n          console.error('Speech recognition error', event.error);\n          setErrorMessage(`Error: ${event.error}`);\n          setIsListening(false);\n        };\n\n        recognition.onend = () => {\n          setIsListening(false);\n        };\n\n        setSpeechRecognition(recognition);\n      } else {\n        setErrorMessage('Speech recognition not supported in this browser');\n      }\n    }\n  }, [onSpeechResult]);\n\n  const toggleListening = () => {\n    if (disabled || !speechRecognition) return;\n\n    if (isListening) {\n      speechRecognition.stop();\n      setIsListening(false);\n    } else {\n      setErrorMessage(null);\n      speechRecognition.start();\n      setIsListening(true);\n    }\n  };\n\n  return (\n    <div className=\"voice-input-container\">\n      <button\n        className={`voice-input-button ${isListening ? 'listening' : ''} ${disabled ? 'disabled' : ''}`}\n        onClick={toggleListening}\n        disabled={disabled || !speechRecognition}\n        title={errorMessage || (isListening ? 'Tap to stop' : 'Tap to speak')}\n        aria-label=\"Voice input\"\n      >\n        <svg\n          className=\"microphone-svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {/* Microphone body */}\n          <rect\n            x=\"9\"\n            y=\"2\"\n            width=\"6\"\n            height=\"12\"\n            rx=\"3\"\n            fill={isListening ? \"#FFFFFF\" : \"#555555\"}\n          />\n          {/* Microphone base */}\n          <path\n            d=\"M5 10V11C5 14.866 8.13401 18 12 18V18C15.866 18 19 14.866 19 11V10\"\n            stroke={isListening ? \"#FFFFFF\" : \"#555555\"}\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n          />\n          {/* Microphone stand */}\n          <line\n            x1=\"12\"\n            y1=\"18\"\n            x2=\"12\"\n            y2=\"22\"\n            stroke={isListening ? \"#FFFFFF\" : \"#555555\"}\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n          />\n          {/* Microphone base */}\n          <line\n            x1=\"8\"\n            y1=\"22\"\n            x2=\"16\"\n            y2=\"22\"\n            stroke={isListening ? \"#FFFFFF\" : \"#555555\"}\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n          />\n        </svg>\n        {isListening && (\n          <div className=\"sound-waves\">\n            <div className={`wave wave-1 ${animationLevel >= 1 ? 'active' : ''}`}></div>\n            <div className={`wave wave-2 ${animationLevel >= 2 ? 'active' : ''}`}></div>\n            <div className={`wave wave-3 ${animationLevel >= 3 ? 'active' : ''}`}></div>\n          </div>\n        )}\n      </button>\n      {errorMessage && <div className=\"voice-input-error\">{errorMessage}</div>}\n    </div>\n  );\n};\n\nexport default VoiceInput;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO1B,MAAMC,UAAqC,GAAGA,CAAC;EAAEC,cAAc;EAAEC,QAAQ,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EACtF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACU,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGX,QAAQ,CAA2B,IAAI,CAAC;EAC1F,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/E,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAgB,IAAI,CAAC;EACrE,MAAMkB,eAAe,GAAGC,MAAM,CAAsB,IAAI,CAAC;EACzD,MAAMC,WAAW,GAAGD,MAAM,CAAsB,IAAI,CAAC;EACrD,MAAME,cAAc,GAAGF,MAAM,CAAqB,IAAI,CAAC;;EAEvD;EACA,MAAMG,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI;MACF;MACA,MAAMC,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAKD,MAAM,CAASE,kBAAkB,EAAE,CAAC;MACtFR,eAAe,CAACS,OAAO,GAAGJ,YAAY;;MAEtC;MACA,MAAMK,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAAEC,KAAK,EAAE;MAAK,CAAC,CAAC;MACzEX,cAAc,CAACM,OAAO,GAAGC,MAAM;;MAE/B;MACA,MAAMK,QAAQ,GAAGV,YAAY,CAACW,cAAc,CAAC,CAAC;MAC9CD,QAAQ,CAACE,OAAO,GAAG,EAAE,CAAC,CAAC;MACvBf,WAAW,CAACO,OAAO,GAAGM,QAAQ;;MAE9B;MACA,MAAMG,MAAM,GAAGb,YAAY,CAACc,uBAAuB,CAACT,MAAM,CAAC;MAC3DQ,MAAM,CAACE,OAAO,CAACL,QAAQ,CAAC;;MAExB;MACAM,cAAc,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,uCAAuC,EAAEF,GAAG,CAAC;MAC3DvB,eAAe,CAAC,+CAA+C,CAAC;IAClE;EACF,CAAC;;EAED;EACA,MAAM0B,sBAAsB,GAAGA,CAAA,KAAM;IACnC,IAAItB,cAAc,CAACM,OAAO,EAAE;MAC1BN,cAAc,CAACM,OAAO,CAACiB,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;MACjE1B,cAAc,CAACM,OAAO,GAAG,IAAI;IAC/B;IAEA,IAAIT,eAAe,CAACS,OAAO,EAAE;MAC3BT,eAAe,CAACS,OAAO,CAACqB,KAAK,CAAC,CAAC;MAC/B9B,eAAe,CAACS,OAAO,GAAG,IAAI;IAChC;IAEAP,WAAW,CAACO,OAAO,GAAG,IAAI;IAC1BZ,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACpC,CAAC;;EAED;EACA,MAAMwB,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAI,CAACnB,WAAW,CAACO,OAAO,IAAI,CAACnB,WAAW,EAAE;IAE1C,MAAMyC,YAAY,GAAG7B,WAAW,CAACO,OAAO,CAACuB,iBAAiB;IAC1D,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAACH,YAAY,CAAC;IAE9C,MAAMI,eAAe,GAAGA,CAAA,KAAM;MAC5B,IAAI,CAACjC,WAAW,CAACO,OAAO,IAAI,CAACnB,WAAW,EAAE;;MAE1C;MACAY,WAAW,CAACO,OAAO,CAAC2B,oBAAoB,CAACH,SAAS,CAAC;;MAEnD;MACA,MAAMI,IAAI,GAAGJ,SAAS,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;MACjE,MAAMC,MAAM,GAAGT,SAAS,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;MACnE,MAAME,GAAG,GAAGV,SAAS,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;MAChE,MAAMG,OAAO,GAAGX,SAAS,CAACK,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;MACrE,MAAMI,IAAI,GAAGZ,SAAS,CAACK,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;;MAEnE;MACA,MAAMK,UAAU,GAAG,CACjBT,IAAI,GAAG,GAAG,EACVK,MAAM,GAAG,GAAG,EACZC,GAAG,GAAG,GAAG,EACTC,OAAO,GAAG,GAAG,EACbC,IAAI,GAAG,GAAG,CACX;MAEDhD,iBAAiB,CAACiD,UAAU,CAAC;;MAE7B;MACAC,qBAAqB,CAACZ,eAAe,CAAC;IACxC,CAAC;IAEDA,eAAe,CAAC,CAAC;EACnB,CAAC;;EAED;EACApD,SAAS,CAAC,MAAM;IACd,IAAIiE,iBAAwC,GAAG,IAAI;IAEnD,IAAI1D,WAAW,EAAE;MACf;MACAc,oBAAoB,CAAC,CAAC;;MAEtB;MACA4C,iBAAiB,GAAGC,WAAW,CAAC,MAAM;QACpCtD,iBAAiB,CAACuD,IAAI,IAAI,CAACA,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;MAC7C,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,MAAM;MACL;MACAzB,sBAAsB,CAAC,CAAC;MAExB,IAAIuB,iBAAiB,EAAE;QACrBG,aAAa,CAACH,iBAAiB,CAAC;QAChCrD,iBAAiB,CAAC,CAAC,CAAC;MACtB;IACF;IAEA,OAAO,MAAM;MACX,IAAIqD,iBAAiB,EAAEG,aAAa,CAACH,iBAAiB,CAAC;MACvDvB,sBAAsB,CAAC,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,CAACnC,WAAW,CAAC,CAAC;;EAEjB;EACAP,SAAS,CAAC,MAAM;IACd,IAAI,OAAOuB,MAAM,KAAK,WAAW,EAAE;MACjC;MACA,MAAM8C,iBAAiB,GAAG9C,MAAM,CAAC8C,iBAAiB,IAAI9C,MAAM,CAAC+C,uBAAuB;MAEpF,IAAID,iBAAiB,EAAE;QACrB,MAAME,WAAW,GAAG,IAAIF,iBAAiB,CAAC,CAAC;QAC3CE,WAAW,CAACC,UAAU,GAAG,KAAK;QAC9BD,WAAW,CAACE,cAAc,GAAG,KAAK;QAClCF,WAAW,CAACG,IAAI,GAAG,OAAO;QAE1BH,WAAW,CAACI,QAAQ,GAAIC,KAAK,IAAK;UAChC,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACD,UAAU;UACjDzE,cAAc,CAACyE,UAAU,CAAC;UAC1BrE,cAAc,CAAC,KAAK,CAAC;QACvB,CAAC;QAED+D,WAAW,CAACQ,OAAO,GAAIH,KAAK,IAAK;UAC/BpC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEmC,KAAK,CAACnC,KAAK,CAAC;UACtDzB,eAAe,CAAC,UAAU4D,KAAK,CAACnC,KAAK,EAAE,CAAC;UACxCjC,cAAc,CAAC,KAAK,CAAC;QACvB,CAAC;QAED+D,WAAW,CAACS,KAAK,GAAG,MAAM;UACxBxE,cAAc,CAAC,KAAK,CAAC;QACvB,CAAC;QAEDE,oBAAoB,CAAC6D,WAAW,CAAC;MACnC,CAAC,MAAM;QACLvD,eAAe,CAAC,kDAAkD,CAAC;MACrE;IACF;EACF,CAAC,EAAE,CAACZ,cAAc,CAAC,CAAC;EAEpB,MAAM6E,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI5E,QAAQ,IAAI,CAACI,iBAAiB,EAAE;IAEpC,IAAIF,WAAW,EAAE;MACfE,iBAAiB,CAACqC,IAAI,CAAC,CAAC;MACxBtC,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,MAAM;MACLQ,eAAe,CAAC,IAAI,CAAC;MACrBP,iBAAiB,CAACyE,KAAK,CAAC,CAAC;MACzB1E,cAAc,CAAC,IAAI,CAAC;IACtB;EACF,CAAC;EAED,oBACEN,OAAA;IAAKiF,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpClF,OAAA;MACEiF,SAAS,EAAE,sBAAsB5E,WAAW,GAAG,WAAW,GAAG,EAAE,IAAIF,QAAQ,GAAG,UAAU,GAAG,EAAE,EAAG;MAChGgF,OAAO,EAAEJ,eAAgB;MACzB5E,QAAQ,EAAEA,QAAQ,IAAI,CAACI,iBAAkB;MACzC6E,KAAK,EAAEvE,YAAY,KAAKR,WAAW,GAAG,aAAa,GAAG,cAAc,CAAE;MACtE,cAAW,aAAa;MAAA6E,QAAA,gBAExBlF,OAAA;QACEiF,SAAS,EAAC,gBAAgB;QAC1BI,KAAK,EAAC,IAAI;QACVC,MAAM,EAAC,IAAI;QACXC,OAAO,EAAC,WAAW;QACnBC,IAAI,EAAC,MAAM;QACXC,KAAK,EAAC,4BAA4B;QAAAP,QAAA,gBAGlClF,OAAA;UACE0F,CAAC,EAAC,GAAG;UACLC,CAAC,EAAC,GAAG;UACLN,KAAK,EAAC,GAAG;UACTC,MAAM,EAAC,IAAI;UACXM,EAAE,EAAC,GAAG;UACNJ,IAAI,EAAEnF,WAAW,GAAG,SAAS,GAAG;QAAU;UAAAwF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CAAC,eAEFhG,OAAA;UACEiG,CAAC,EAAC,oEAAoE;UACtEC,MAAM,EAAE7F,WAAW,GAAG,SAAS,GAAG,SAAU;UAC5C8F,WAAW,EAAC,GAAG;UACfC,aAAa,EAAC;QAAO;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB,CAAC,eAEFhG,OAAA;UACEqG,EAAE,EAAC,IAAI;UACPC,EAAE,EAAC,IAAI;UACPC,EAAE,EAAC,IAAI;UACPC,EAAE,EAAC,IAAI;UACPN,MAAM,EAAE7F,WAAW,GAAG,SAAS,GAAG,SAAU;UAC5C8F,WAAW,EAAC,GAAG;UACfC,aAAa,EAAC;QAAO;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB,CAAC,eAEFhG,OAAA;UACEqG,EAAE,EAAC,GAAG;UACNC,EAAE,EAAC,IAAI;UACPC,EAAE,EAAC,IAAI;UACPC,EAAE,EAAC,IAAI;UACPN,MAAM,EAAE7F,WAAW,GAAG,SAAS,GAAG,SAAU;UAC5C8F,WAAW,EAAC,GAAG;UACfC,aAAa,EAAC;QAAO;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,EACL3F,WAAW,iBACVL,OAAA;QAAKiF,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BlF,OAAA;UAAKiF,SAAS,EAAE,eAAexE,cAAc,IAAI,CAAC,GAAG,QAAQ,GAAG,EAAE;QAAG;UAAAoF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC5EhG,OAAA;UAAKiF,SAAS,EAAE,eAAexE,cAAc,IAAI,CAAC,GAAG,QAAQ,GAAG,EAAE;QAAG;UAAAoF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC5EhG,OAAA;UAAKiF,SAAS,EAAE,eAAexE,cAAc,IAAI,CAAC,GAAG,QAAQ,GAAG,EAAE;QAAG;UAAAoF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC,EACRnF,YAAY,iBAAIb,OAAA;MAAKiF,SAAS,EAAC,mBAAmB;MAAAC,QAAA,EAAErE;IAAY;MAAAgF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV,CAAC;AAAC5F,EAAA,CAzOIH,UAAqC;AAAAwG,EAAA,GAArCxG,UAAqC;AA2O3C,eAAeA,UAAU;AAAC,IAAAwG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}