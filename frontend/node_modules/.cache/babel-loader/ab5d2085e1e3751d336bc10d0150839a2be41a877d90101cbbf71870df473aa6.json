{"ast":null,"code":"var _jsxFileName = \"E:\\\\test project\\\\frontend\\\\src\\\\components\\\\DataVisualization.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Pie, Bar, Line } from 'react-chartjs-2';\nimport './DataVisualization.css';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);\nconst DataVisualization = ({\n  data,\n  initialChartType = 'bar',\n  showTableByDefault = false,\n  formattedHeaders\n}) => {\n  _s();\n  const [chartType, setChartType] = useState(initialChartType);\n  const [labelColumn, setLabelColumn] = useState(null);\n  const [valueColumn, setValueColumn] = useState(null);\n  const [isFormatted, setIsFormatted] = useState(true);\n\n  // Map of original column names to formatted display names\n  const columnDisplayNames = React.useMemo(() => {\n    if (!formattedHeaders || formattedHeaders.length !== data.columns.length) {\n      return {};\n    }\n    const displayMap = {};\n    data.columns.forEach((col, index) => {\n      displayMap[col] = formattedHeaders[index];\n    });\n    return displayMap;\n  }, [data.columns, formattedHeaders]);\n\n  // Find numeric columns for values\n  const numericColumns = data.columns.filter(col => {\n    if (data.rows.length === 0) return false;\n    const value = data.rows[0][col];\n    return typeof value === 'number' || !isNaN(Number(value));\n  });\n\n  // Find string/categorical columns for labels\n  const categoricalColumns = data.columns.filter(col => {\n    if (data.rows.length === 0) return false;\n    const value = data.rows[0][col];\n    return typeof value === 'string' || value instanceof String;\n  });\n\n  // All columns for complete selection options\n  const allColumns = data.columns;\n\n  // Auto-select appropriate columns on mount\n  React.useEffect(() => {\n    // Auto-select categorical column for labels\n    if (!labelColumn && categoricalColumns.length > 0) {\n      // Prefer department_name or name columns if available\n      const preferredLabelColumns = ['department_name', 'name', 'employee_first_name', 'employee_last_name'];\n      const preferredColumn = categoricalColumns.find(col => preferredLabelColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase())));\n      setLabelColumn(preferredColumn || categoricalColumns[0]);\n    }\n\n    // Auto-select numeric column for values\n    if (!valueColumn && numericColumns.length > 0) {\n      // Prefer salary or amount columns if available\n      const preferredValueColumns = ['salary', 'amount', 'price', 'cost', 'revenue', 'count'];\n      const preferredColumn = numericColumns.find(col => preferredValueColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase())));\n      setValueColumn(preferredColumn || numericColumns[0]);\n    }\n  }, [categoricalColumns, numericColumns, labelColumn, valueColumn]);\n  const handleVisualize = type => {\n    setChartType(type);\n  };\n  const formatValue = value => {\n    if (isFormatted) {\n      // Check if it's likely a currency value\n      if (valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('salary') || valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('price') || valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('cost') || valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('revenue')) {\n        return `$${value.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2\n        })}`;\n      }\n\n      // Format large numbers with commas\n      if (value >= 1000) {\n        return value.toLocaleString();\n      }\n\n      // Format percentages\n      if (valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('percent') || valueColumn !== null && valueColumn !== void 0 && valueColumn.toLowerCase().includes('rate')) {\n        return `${value.toFixed(2)}%`;\n      }\n    }\n    return String(value);\n  };\n  const prepareChartData = () => {\n    if (!labelColumn || !valueColumn || !data.rows.length) {\n      return {\n        labels: [],\n        datasets: [{\n          data: [],\n          backgroundColor: []\n        }]\n      };\n    }\n\n    // Group data by label column and sum values\n    const groupedData = {};\n    data.rows.forEach(row => {\n      const label = String(row[labelColumn]);\n      const value = Number(row[valueColumn]);\n      if (!isNaN(value)) {\n        if (groupedData[label]) {\n          groupedData[label] += value;\n        } else {\n          groupedData[label] = value;\n        }\n      }\n    });\n\n    // Generate colors\n    const generateColors = count => {\n      const colors = [];\n      for (let i = 0; i < count; i++) {\n        const hue = i * 137 % 360; // Use golden angle for nice distribution\n        colors.push(`hsl(${hue}, 70%, 60%)`);\n      }\n      return colors;\n    };\n    const labels = Object.keys(groupedData);\n    const values = Object.values(groupedData);\n    const colors = generateColors(labels.length);\n    return {\n      labels,\n      datasets: [{\n        label: valueColumn,\n        data: values,\n        backgroundColor: colors,\n        borderColor: colors.map(color => color.replace('60%', '50%')),\n        borderWidth: 1\n      }]\n    };\n  };\n  const chartData = prepareChartData();\n  const renderChart = () => {\n    // For table view, we don't need label and value columns\n    if (chartType === 'table') {\n      // Continue to table rendering\n    }\n    // For chart views, we need label and value columns\n    else if (!chartType || !labelColumn || !valueColumn) {\n      return null;\n    }\n\n    // For table view, render a complete data table with all columns\n    if (chartType === 'table') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"data-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: data.columns.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                children: columnDisplayNames[col] || col\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: data.rows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: data.columns.map((col, colIndex) => {\n                const value = row[col];\n                let displayValue;\n\n                // Format values appropriately\n                if (typeof value === 'number' && isFormatted) {\n                  if (col.toLowerCase().includes('salary') || col.toLowerCase().includes('price') || col.toLowerCase().includes('cost')) {\n                    displayValue = `$${value.toLocaleString()}`;\n                  } else {\n                    displayValue = value.toLocaleString();\n                  }\n                } else if (value instanceof Date) {\n                  displayValue = value.toLocaleDateString();\n                } else if (value === null || value === undefined) {\n                  displayValue = '-';\n                } else {\n                  displayValue = String(value);\n                }\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: displayValue\n                }, colIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 238,\n                  columnNumber: 28\n                }, this);\n              })\n            }, rowIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this);\n    }\n\n    // For chart views, use Chart.js\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top'\n        },\n        title: {\n          display: true,\n          text: `${valueColumn} by ${labelColumn}`\n        },\n        tooltip: {\n          callbacks: {\n            label: function (context) {\n              let label = context.dataset.label || '';\n              if (label) {\n                label += ': ';\n              }\n              if (context.parsed !== null) {\n                const value = context.parsed;\n                label += isFormatted ? formatValue(value) : value;\n              }\n              return label;\n            }\n          }\n        }\n      },\n      scales: chartType !== 'pie' ? {\n        y: {\n          ticks: {\n            callback: function (value) {\n              return isFormatted ? formatValue(value) : value;\n            }\n          }\n        }\n      } : undefined\n    };\n    switch (chartType) {\n      case 'pie':\n        return /*#__PURE__*/_jsxDEV(Pie, {\n          data: chartData,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 16\n        }, this);\n      case 'bar':\n        return /*#__PURE__*/_jsxDEV(Bar, {\n          data: chartData,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 16\n        }, this);\n      case 'line':\n        return /*#__PURE__*/_jsxDEV(Line, {\n          data: chartData,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 16\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-visualization\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '0.5rem',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '1rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '0.5rem',\n            flexWrap: 'wrap'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleVisualize('bar'),\n            style: {\n              backgroundColor: chartType === 'bar' ? 'var(--accent-color)' : '#f0f0f0',\n              color: chartType === 'bar' ? 'white' : 'var(--text-primary)'\n            },\n            children: \"Bar Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleVisualize('pie'),\n            style: {\n              backgroundColor: chartType === 'pie' ? 'var(--accent-color)' : '#f0f0f0',\n              color: chartType === 'pie' ? 'white' : 'var(--text-primary)'\n            },\n            children: \"Pie Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleVisualize('line'),\n            style: {\n              backgroundColor: chartType === 'line' ? 'var(--accent-color)' : '#f0f0f0',\n              color: chartType === 'line' ? 'white' : 'var(--text-primary)'\n            },\n            children: \"Line Chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleVisualize('table'),\n            style: {\n              backgroundColor: chartType === 'table' ? 'var(--accent-color)' : '#f0f0f0',\n              color: chartType === 'table' ? 'white' : 'var(--text-primary)'\n            },\n            children: \"Table\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            gap: '0.5rem',\n            flexWrap: 'wrap',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '0.5rem'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Label:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: labelColumn || '',\n              onChange: e => setLabelColumn(e.target.value),\n              style: {\n                padding: '0.25rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 17\n              }, this), allColumns.map(col => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: col,\n                children: columnDisplayNames[col] || col\n              }, col, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '0.5rem'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Value:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: valueColumn || '',\n              onChange: e => setValueColumn(e.target.value),\n              style: {\n                padding: '0.25rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 370,\n                columnNumber: 17\n              }, this), allColumns.map(col => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: col,\n                children: columnDisplayNames[col] || col\n              }, col, false, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setIsFormatted(!isFormatted),\n            style: {\n              backgroundColor: isFormatted ? 'var(--accent-color)' : '#f0f0f0',\n              color: isFormatted ? 'white' : 'var(--text-primary)'\n            },\n            children: isFormatted ? 'Raw Values' : 'Format Values'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: renderChart()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n};\n_s(DataVisualization, \"sEqMdgXkim+utw3zcwes2uKZ77U=\");\n_c = DataVisualization;\nexport default DataVisualization;\nvar _c;\n$RefreshReg$(_c, \"DataVisualization\");","map":{"version":3,"names":["React","useState","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","Pie","Bar","Line","jsxDEV","_jsxDEV","register","DataVisualization","data","initialChartType","showTableByDefault","formattedHeaders","_s","chartType","setChartType","labelColumn","setLabelColumn","valueColumn","setValueColumn","isFormatted","setIsFormatted","columnDisplayNames","useMemo","length","columns","displayMap","forEach","col","index","numericColumns","filter","rows","value","isNaN","Number","categoricalColumns","String","allColumns","useEffect","preferredLabelColumns","preferredColumn","find","some","preferred","toLowerCase","includes","preferredValueColumns","handleVisualize","type","formatValue","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","toFixed","prepareChartData","labels","datasets","backgroundColor","groupedData","row","label","generateColors","count","colors","i","hue","push","Object","keys","values","borderColor","map","color","replace","borderWidth","chartData","renderChart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","colIndex","displayValue","Date","toLocaleDateString","options","responsive","plugins","legend","position","title","display","text","tooltip","callbacks","context","dataset","parsed","scales","y","ticks","callback","style","flexWrap","gap","justifyContent","alignItems","marginBottom","onClick","onChange","e","target","padding","_c","$RefreshReg$"],"sources":["E:/test project/frontend/src/components/DataVisualization.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Pie, Bar, Line } from 'react-chartjs-2';\nimport './DataVisualization.css';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface DataVisualizationProps {\n  data: {\n    columns: string[];\n    rows: any[];\n  };\n  initialChartType?: 'pie' | 'bar' | 'line' | 'table';\n  showTableByDefault?: boolean;\n  formattedHeaders?: string[];\n}\n\nconst DataVisualization: React.FC<DataVisualizationProps> = ({\n  data,\n  initialChartType = 'bar',\n  showTableByDefault = false,\n  formattedHeaders\n}) => {\n  const [chartType, setChartType] = useState<'pie' | 'bar' | 'line' | 'table' | null>(initialChartType);\n  const [labelColumn, setLabelColumn] = useState<string | null>(null);\n  const [valueColumn, setValueColumn] = useState<string | null>(null);\n  const [isFormatted, setIsFormatted] = useState<boolean>(true);\n\n  // Map of original column names to formatted display names\n  const columnDisplayNames = React.useMemo(() => {\n    if (!formattedHeaders || formattedHeaders.length !== data.columns.length) {\n      return {};\n    }\n\n    const displayMap: Record<string, string> = {};\n    data.columns.forEach((col, index) => {\n      displayMap[col] = formattedHeaders[index];\n    });\n\n    return displayMap;\n  }, [data.columns, formattedHeaders]);\n\n  // Find numeric columns for values\n  const numericColumns = data.columns.filter(col => {\n    if (data.rows.length === 0) return false;\n    const value = data.rows[0][col];\n    return typeof value === 'number' || !isNaN(Number(value));\n  });\n\n  // Find string/categorical columns for labels\n  const categoricalColumns = data.columns.filter(col => {\n    if (data.rows.length === 0) return false;\n    const value = data.rows[0][col];\n    return typeof value === 'string' || value instanceof String;\n  });\n\n  // All columns for complete selection options\n  const allColumns = data.columns;\n\n  // Auto-select appropriate columns on mount\n  React.useEffect(() => {\n    // Auto-select categorical column for labels\n    if (!labelColumn && categoricalColumns.length > 0) {\n      // Prefer department_name or name columns if available\n      const preferredLabelColumns = ['department_name', 'name', 'employee_first_name', 'employee_last_name'];\n      const preferredColumn = categoricalColumns.find(col =>\n        preferredLabelColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase()))\n      );\n\n      setLabelColumn(preferredColumn || categoricalColumns[0]);\n    }\n\n    // Auto-select numeric column for values\n    if (!valueColumn && numericColumns.length > 0) {\n      // Prefer salary or amount columns if available\n      const preferredValueColumns = ['salary', 'amount', 'price', 'cost', 'revenue', 'count'];\n      const preferredColumn = numericColumns.find(col =>\n        preferredValueColumns.some(preferred => col.toLowerCase().includes(preferred.toLowerCase()))\n      );\n\n      setValueColumn(preferredColumn || numericColumns[0]);\n    }\n  }, [categoricalColumns, numericColumns, labelColumn, valueColumn]);\n\n  const handleVisualize = (type: 'pie' | 'bar' | 'line' | 'table') => {\n    setChartType(type);\n  };\n\n  const formatValue = (value: number): string => {\n    if (isFormatted) {\n      // Check if it's likely a currency value\n      if (valueColumn?.toLowerCase().includes('salary') ||\n          valueColumn?.toLowerCase().includes('price') ||\n          valueColumn?.toLowerCase().includes('cost') ||\n          valueColumn?.toLowerCase().includes('revenue')) {\n        return `$${value.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n      }\n\n      // Format large numbers with commas\n      if (value >= 1000) {\n        return value.toLocaleString();\n      }\n\n      // Format percentages\n      if (valueColumn?.toLowerCase().includes('percent') || valueColumn?.toLowerCase().includes('rate')) {\n        return `${value.toFixed(2)}%`;\n      }\n    }\n\n    return String(value);\n  };\n\n  const prepareChartData = () => {\n    if (!labelColumn || !valueColumn || !data.rows.length) {\n      return {\n        labels: [],\n        datasets: [{\n          data: [],\n          backgroundColor: [],\n        }]\n      };\n    }\n\n    // Group data by label column and sum values\n    const groupedData: Record<string, number> = {};\n\n    data.rows.forEach(row => {\n      const label = String(row[labelColumn]);\n      const value = Number(row[valueColumn]);\n\n      if (!isNaN(value)) {\n        if (groupedData[label]) {\n          groupedData[label] += value;\n        } else {\n          groupedData[label] = value;\n        }\n      }\n    });\n\n    // Generate colors\n    const generateColors = (count: number) => {\n      const colors = [];\n      for (let i = 0; i < count; i++) {\n        const hue = (i * 137) % 360; // Use golden angle for nice distribution\n        colors.push(`hsl(${hue}, 70%, 60%)`);\n      }\n      return colors;\n    };\n\n    const labels = Object.keys(groupedData);\n    const values = Object.values(groupedData);\n    const colors = generateColors(labels.length);\n\n    return {\n      labels,\n      datasets: [{\n        label: valueColumn,\n        data: values,\n        backgroundColor: colors,\n        borderColor: colors.map(color => color.replace('60%', '50%')),\n        borderWidth: 1,\n      }]\n    };\n  };\n\n  const chartData = prepareChartData();\n\n  const renderChart = () => {\n    // For table view, we don't need label and value columns\n    if (chartType === 'table') {\n      // Continue to table rendering\n    }\n    // For chart views, we need label and value columns\n    else if (!chartType || !labelColumn || !valueColumn) {\n      return null;\n    }\n\n    // For table view, render a complete data table with all columns\n    if (chartType === 'table') {\n      return (\n        <div className=\"data-table-container\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                {data.columns.map((col, index) => (\n                  <th key={index}>\n                    {columnDisplayNames[col] || col}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {data.rows.map((row, rowIndex) => (\n                <tr key={rowIndex}>\n                  {data.columns.map((col, colIndex) => {\n                    const value = row[col];\n                    let displayValue: React.ReactNode;\n\n                    // Format values appropriately\n                    if (typeof value === 'number' && isFormatted) {\n                      if (col.toLowerCase().includes('salary') ||\n                          col.toLowerCase().includes('price') ||\n                          col.toLowerCase().includes('cost')) {\n                        displayValue = `$${value.toLocaleString()}`;\n                      } else {\n                        displayValue = value.toLocaleString();\n                      }\n                    } else if (value instanceof Date) {\n                      displayValue = value.toLocaleDateString();\n                    } else if (value === null || value === undefined) {\n                      displayValue = '-';\n                    } else {\n                      displayValue = String(value);\n                    }\n\n                    return <td key={colIndex}>{displayValue}</td>;\n                  })}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n\n    // For chart views, use Chart.js\n    const options = {\n      responsive: true,\n      plugins: {\n        legend: {\n          position: 'top' as const,\n        },\n        title: {\n          display: true,\n          text: `${valueColumn} by ${labelColumn}`,\n        },\n        tooltip: {\n          callbacks: {\n            label: function(context: any) {\n              let label = context.dataset.label || '';\n              if (label) {\n                label += ': ';\n              }\n              if (context.parsed !== null) {\n                const value = context.parsed;\n                label += isFormatted ? formatValue(value) : value;\n              }\n              return label;\n            }\n          }\n        }\n      },\n      scales: chartType !== 'pie' ? {\n        y: {\n          ticks: {\n            callback: function(value: any) {\n              return isFormatted ? formatValue(value) : value;\n            }\n          }\n        }\n      } : undefined\n    };\n\n    switch (chartType) {\n      case 'pie':\n        return <Pie data={chartData} options={options} />;\n      case 'bar':\n        return <Bar data={chartData} options={options} />;\n      case 'line':\n        return <Line data={chartData} options={options} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"data-visualization\">\n      <div className=\"visualization-controls\">\n        <div style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '0.5rem',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '1rem'\n        }}>\n          <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap' }}>\n            <button\n              onClick={() => handleVisualize('bar')}\n              style={{\n                backgroundColor: chartType === 'bar' ? 'var(--accent-color)' : '#f0f0f0',\n                color: chartType === 'bar' ? 'white' : 'var(--text-primary)',\n              }}\n            >\n              Bar Chart\n            </button>\n            <button\n              onClick={() => handleVisualize('pie')}\n              style={{\n                backgroundColor: chartType === 'pie' ? 'var(--accent-color)' : '#f0f0f0',\n                color: chartType === 'pie' ? 'white' : 'var(--text-primary)',\n              }}\n            >\n              Pie Chart\n            </button>\n            <button\n              onClick={() => handleVisualize('line')}\n              style={{\n                backgroundColor: chartType === 'line' ? 'var(--accent-color)' : '#f0f0f0',\n                color: chartType === 'line' ? 'white' : 'var(--text-primary)',\n              }}\n            >\n              Line Chart\n            </button>\n            <button\n              onClick={() => handleVisualize('table')}\n              style={{\n                backgroundColor: chartType === 'table' ? 'var(--accent-color)' : '#f0f0f0',\n                color: chartType === 'table' ? 'white' : 'var(--text-primary)',\n              }}\n            >\n              Table\n            </button>\n          </div>\n\n          <div style={{ display: 'flex', gap: '0.5rem', flexWrap: 'wrap', alignItems: 'center' }}>\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n              <label>Label:</label>\n              <select\n                value={labelColumn || ''}\n                onChange={(e) => setLabelColumn(e.target.value)}\n                style={{ padding: '0.25rem' }}\n              >\n                <option value=\"\">Select</option>\n                {allColumns.map(col => (\n                  <option key={col} value={col}>{columnDisplayNames[col] || col}</option>\n                ))}\n              </select>\n            </div>\n\n            <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n              <label>Value:</label>\n              <select\n                value={valueColumn || ''}\n                onChange={(e) => setValueColumn(e.target.value)}\n                style={{ padding: '0.25rem' }}\n              >\n                <option value=\"\">Select</option>\n                {allColumns.map(col => (\n                  <option key={col} value={col}>{columnDisplayNames[col] || col}</option>\n                ))}\n              </select>\n            </div>\n\n            <button\n              onClick={() => setIsFormatted(!isFormatted)}\n              style={{\n                backgroundColor: isFormatted ? 'var(--accent-color)' : '#f0f0f0',\n                color: isFormatted ? 'white' : 'var(--text-primary)',\n              }}\n            >\n              {isFormatted ? 'Raw Values' : 'Format Values'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"chart-container\">\n        {renderChart()}\n      </div>\n    </div>\n  );\n};\n\nexport default DataVisualization;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}